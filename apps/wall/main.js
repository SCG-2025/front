/*
==========================================
Îã§Ï§ë BPM ÏùåÏïÖ ÏãúÏä§ÌÖú Íµ¨ÌòÑ Í∞ÄÏù¥Îìú (ÏöîÏïΩ Ï£ºÏÑù)
==========================================
- ÏïΩ 20Í∞úÏùò ÏùåÏïÖ ÏÑ∏Ìä∏ ÏòàÏ†ï, Í∞ÅÍ∞Å Îã§Î•∏ BPM Í∞ÄÎä•ÏÑ±
- ÏÑúÎ°ú Îã§Î•∏ BPMÏùò ÏùåÏïÖÏù¥ ÎèôÏãú Ïû¨ÏÉùÎê† Ïàò ÏûàÏùå
- ÌòÑÏû¨Îäî Îã®Ïùº ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠(110 BPM) Í∏∞Î∞ò ÏûÑÏãú ÎèôÍ∏∞Ìôî
- Íµ¨Ï°∞Ï†Å ÌôïÏû• ÏßÄÏ†ê(// TODO)Îì§ Ïú†ÏßÄ
*/

import { db } from './firebase-init.js';
import { collection, onSnapshot } from 'https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js';

let avatars = []; // FirebaseÏóêÏÑú Í∞ÄÏ†∏Ïò® ÏïÑÎ∞îÌÉÄ Îç∞Ïù¥ÌÑ∞
let stageAvatars = []; // Î¨¥ÎåÄ Ï†ÑÏö© ÏïÑÎ∞îÌÉÄÎì§

// ÏïÑÎ∞îÌÉÄ Ïù¥ÎØ∏ÏßÄ Î°úÎî©ÏùÑ ÏúÑÌïú Î≥ÄÏàòÎì§
let avatarAssets = {
  female: [],
  male: [],
  heads: [],
  wing: null
};

// ÏïÑÎ∞îÌÉÄ Ïù¥ÎØ∏ÏßÄ Î°úÎî© ÏÉÅÌÉú (ÌòÑÏû¨ ÏÇ¨Ïö©Ï≤òÎäî ÏóÜÏßÄÎßå Ï∂îÌõÑ ÌôúÏö© Í∞ÄÎä•)
let assetsLoaded = false;

let avatarImage;
let selectedAvatar = null;
let isDragging = false;
let showPopup = false;
let popupAvatar = null;
let dragOffset = { x: 0, y: 0 };

// Ïπ¥Î©îÎùº/Ìå®Îãù Í¥ÄÎ†® Î≥ÄÏàòÎì§
let cameraX = 0;
let cameraY = 0;
let isPanning = false;
let panStart = { x: 0, y: 0 };

// ÏïÑÎ∞îÌÉÄ Ï†ïÎ†¨ Í¥ÄÎ†® Î≥ÄÏàòÎì§
let isSorting = false;
let sortingAnimations = []; // Ï†ïÎ†¨ Ïï†ÎãàÎ©îÏù¥ÏÖò Ï†ïÎ≥¥ Ï†ÄÏû•

// Î∞∞Ìè¨ ÌôòÍ≤Ω ÎîîÎ≤ÑÍπÖÏö© - Ï†ÑÏó≠ Î≥ÄÏàò ÏÉÅÌÉú ÌôïÏù∏
console.log('üîß ÏïÑÎ∞îÌÉÄ Ï†ïÎ†¨ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî:', {
  isSorting: isSorting,
  sortingAnimations: sortingAnimations.length,
  timestamp: new Date().toISOString()
});
// Ï†ÑÏó≠: Í≥°Î≥ÑÎ°ú ÌôîÎ©¥Ïóê Ï∞çÏùÑ ÎèÑÌòïÎì§(Ïä§ÌÅ¨Î¶∞Î≥Ñ Î≥¥Í¥Ä)

// ÏùåÏõê Í¥ÄÎ†® Î≥ÄÏàòÎì§
let musicSamples = {};
let tonePlayers = {}; // Tone.js ÌîåÎ†àÏù¥Ïñ¥Îì§

// Î¨¥ÎåÄ Ïä¨Î°Ø Í¥ÄÎ¶¨ (6Í∞ú Ïä¨Î°Ø)
let stageSlots = [null, null, null, null, null, null];

// ÏùåÏïÖ ÎèôÍ∏∞Ìôî ÏãúÏä§ÌÖú (Îã®Ïùº ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ ÏûÑÏãú)
let masterClock = {
  isRunning: false,
  startTime: 0,
  bpm: 110, // ÏûÑÏãú Í≥†Ï†ïÍ∞í - Ï∂îÌõÑ ÎèôÏ†Å Î≥ÄÍ≤Ω
  beatsPerMeasure: 4,
  currentBeat: 0,
  currentMeasure: 0,
  nextMeasureStart: 0
};

// (ÎØ∏ÎûòÏö©) Îã§Ï§ë BPM Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÏÉòÌîå Ï£ºÏÑù
/*
let musicBpmDatabase = {
  'Music Sample_Bass.mp3': { bpm: 110, key: 'C', timeSignature: '4/4' },
  'Music Sample_Drum.mp3': { bpm: 120, key: 'C', timeSignature: '4/4' },
  'Music Sample_Lead.mp3': { bpm: 95, key: 'G', timeSignature: '4/4' },
};
let activeBpmGroups = {
  110: { avatars: [], masterClock: {...}, isActive: true },
  120: { avatars: [], masterClock: {...}, isActive: false },
  95:  { avatars: [], masterClock: {...}, isActive: false }
};
let avatarBpmMapping = new Map();
*/

let playingAvatars = new Set();   // ÌòÑÏû¨ Ïû¨ÏÉù Ï§ë ÏïÑÎ∞îÌÉÄ id
let pendingAvatars = new Map();   // Îã§Ïùå ÎßàÎîî ÎåÄÍ∏∞ Ï§ë ÏïÑÎ∞îÌÉÄ
let currentBpm = 197;             // ÌòÑÏû¨ BPM (Í≤ÄÏ¶ùÏö©)

// === ÌîΩÏÖÄ ÎØ∏ÎîîÏñ¥ÏïÑÌä∏ Ï†ÑÏó≠ ===
let mediaArt = {
  enabled: true,
  buffers: [],
  w: 128, h: 64,        // Ï†ÄÌï¥ÏÉÅÎèÑ Î≤ÑÌçº(ÌîΩÏÖÄ ÎäêÎÇå)
  fft: null,
  particles: [[], [], []],
  t: 0
};

// ÏÑ∏Ìä∏/ÌÖåÎßà ÌïúÍ∏ÄÎ™Ö Îß§Ìïë
const setNames = {
  // Í∏∞Ï°¥
  verification: 'Í≤ÄÏ¶ùÏö© Music Sample',
  pcroom_gaming: 'PCÎ∞©Í≥º Ïò®ÎùºÏù∏ Í≤åÏûÑ',
  // set1 (ÎîîÏßÄÌÑ∏ & Í≤åÏûÑ)
  home_console_gaming: 'ÏßëÏóêÏÑú Í≤åÏûÑÍ∏∞Î°ú',
  social_media_memories: 'SNS ÏÜç ÎîîÏßÄÌÑ∏ Ï∂îÏñµ',
  photo_album: 'ÏÇ¨ÏßÑÍ≥º Ïï®Î≤îÏùò Í∏∞Ïñµ',
  // set2 (ÌôúÎèô & ÏóêÎÑàÏßÄ)
  sports_activities: 'Ïö¥ÎèôÍ≥º Ïä§Ìè¨Ï∏†',
  festivals_events: 'Ï∂ïÏ†úÏôÄ Ïù¥Î≤§Ìä∏',
  summer_memories: 'Îú®Í±∞Ïö¥ Ïó¨Î¶ÑÏùò Ï∂îÏñµ',
  travel_places: 'Ïó¨ÌñâÏßÄÏùò ÌäπÎ≥ÑÌïú Í≤ΩÌóò',
  // set3 (Îî∞ÎúªÌï® & ÏÜåÌÜµ)
  family_warmth: 'Í∞ÄÏ°±Í≥ºÏùò Îî∞ÎúªÌïú ÏãúÍ∞Ñ',
  school_memories: 'ÌïôÏ∞ΩÏãúÏ†à Ï∂îÏñµ',
  food_snacks: 'ÏùåÏãùÍ≥º Í∞ÑÏãù',
  spring_memories: 'Î¥ÑÏùò Îî∞ÎúªÌïú Ï∂îÏñµ',
  // set4 (Í∞êÏÑ± & Î¨∏Ìôî)
  nostalgia_longing: 'Í∑∏Î¶¨Ïö¥ ÏòõÎÇ† ÏÉùÍ∞Å',
  night_dawn: 'Î∞§Í≥º ÏÉàÎ≤Ω',
  entertainment_culture: 'ÎìúÎùºÎßà/ÏòÅÌôî/ÏõπÌà∞Í≥º Ìï®Íªò',
  karaoke_music: 'ÎÖ∏ÎûòÎ∞©Í≥º ÏùåÏïÖ Í∞êÏÉÅ',
  // set5 (Ï∞ΩÏùòÏÑ± & Í≥ÑÏ†àÍ∞ê)
  art_creative: 'ÎØ∏Ïà†Í≥º Ï∞ΩÏûëÌôúÎèô',
  study_reading: 'Ï°∞Ïö©Ìïú ÌïôÏäµÍ≥º ÎèÖÏÑú',
  autumn_memories: 'Í∞ÄÏùÑÏùò Í∞êÏÑ±',
  winter_memories: 'Ìè¨Í∑ºÌïú Í≤®Ïö∏Ïùò Ï∂îÏñµ',
};

// Î¨¥ÎåÄ ÌÖåÎßàID Ï∂îÎ°† (Î¨¥ÎåÄ ÏúÑ Ï≤´ ÏïÑÎ∞îÌÉÄÏùò musicSet Ïö∞ÏÑ†)
function getCurrentStageThemeId() {
  const onStage = [...stageAvatars, ...avatars].filter(a => a.isOnStage);
  if (onStage.length === 0) return null;
  for (const a of onStage) {
    if (a.musicSet) return a.musicSet;
  }
  // Ìè¥Î∞±: Ïπ¥ÌÖåÍ≥†Î¶¨ ÏµúÎπàÍ∞í ‚Üí Í∞ÑÎã®ÌôîÌïòÏó¨ pcroom_gaming
  return 'pcroom_gaming';
}

// ÌòÑÏû¨ Î¨¥ÎåÄ ÏÑ∏Ìä∏ id (Ìò∏ÌôòÏÑ± Í≤ÄÏÇ¨Ïö©)
function getCurrentStageSet() {
  const onStageAvatars = [...stageAvatars, ...avatars].filter(avatar => avatar.isOnStage);
  if (onStageAvatars.length === 0) return null;
  return onStageAvatars[0].musicSet;
}

// ÏùåÏïÖ ÏÑ∏Ìä∏ Ìò∏ÌôòÏÑ± Í≤ÄÏÇ¨
function checkMusicSetCompatibility(newAvatar) {
  const currentSet = getCurrentStageSet();
  if (!currentSet) return { compatible: true, currentSet: null };
  if (newAvatar.musicSet === currentSet) return { compatible: true, currentSet };
  return { compatible: false, currentSet };
}

// Í≤ΩÍ≥† ÌÜ†Ïä§Ìä∏
let warningMessage = null;
let warningTimer = 0;

function showMusicSetWarning(avatar, currentSet) {
  const names = {
    verification: 'Í≤ÄÏ¶ùÏö© Music Sample',
    pcroom_gaming: 'PCÎ£∏ Í≤åÏûÑÏö©'
  };
  const avatarSetName = names[avatar.musicSet] || avatar.musicSet;
  const currentSetName = names[currentSet] || currentSet;

  warningMessage = {
    title: 'ÏùåÏïÖ ÏÑ∏Ìä∏ Ï∂©Îèå',
    content: `${avatar.nickname}ÏùÄ(Îäî) ${currentSetName} ÏÑ∏Ìä∏ÏôÄ Ìò∏ÌôòÎêòÏßÄ ÏïäÏäµÎãàÎã§.\nÍ∞ôÏùÄ ÏÑ∏Ìä∏ ÏïÑÎ∞îÌÉÄÎßå Ìï®Íªò Ïò¨Î†§Ï£ºÏÑ∏Ïöî.`,
    timestamp: Date.now()
  };
  warningTimer = 180; // ÏïΩ 3Ï¥à
}

// Î¨¥ÎåÄÏùò ÌòÑÏû¨ ÏùåÏïÖ ÏÑ∏Ìä∏ ÌëúÏãú
function drawMusicSetInfo() {
  const currentSet = getCurrentStageSet();
  if (!currentSet) return;

  const setName = setNames[currentSet] || currentSet;
  const onStageCount = [...stageAvatars, ...avatars].filter(a => a.isOnStage).length;

  push();
  fill(255, 255, 255, 200);
  rect(20, height - 120, 350, 80);

  fill(50);
  textAlign(LEFT);
  textSize(14);
  text('üéµ ÌòÑÏû¨ Î¨¥ÎåÄ ÏÑ∏Ìä∏:', 30, height - 95);
  text(`${setName}`, 30, height - 75);
  text(`Î¨¥ÎåÄ ÏïÑÎ∞îÌÉÄ: ${onStageCount}Í∞ú`, 30, height - 55);
  pop();
}

// Í≤ΩÍ≥† ÌÜ†Ïä§Ìä∏ Î†åÎçî
function drawWarningMessage() {
  if (!warningMessage || warningTimer <= 0) return;
  warningTimer--;

  const slideProgress = warningTimer > 150 ? 1 : (warningTimer < 30 ? warningTimer / 30 : 1);
  const alpha = slideProgress * 255;

  push();
  const viewportWidth = window.innerWidth;
  const viewportHeight = window.innerHeight;
  const lines = warningMessage.content.split('\n').filter(line => line.trim() !== '');
  const boxWidth = Math.min(400, viewportWidth - 40);
  const lineHeight = 18;
  const boxHeight = 80 + (lines.length * lineHeight);

  const boxX = (viewportWidth - boxWidth) / 2;
  const targetY = viewportHeight - boxHeight - 30;
  const slideOffset = (1 - slideProgress) * 50;
  const boxY = targetY + slideOffset;

  fill(0, 0, 0, alpha * 0.1);
  rect(boxX + 4, boxY + 4, boxWidth, boxHeight, 8);

  fill(255, 255, 255, alpha);
  rect(boxX, boxY, boxWidth, boxHeight, 8);

  fill(255, 100, 100, alpha);
  rect(boxX, boxY, 4, boxHeight, 8, 0, 0, 8);

  fill(255, 80, 80, alpha);
  textAlign(LEFT);
  textSize(16);
  text('üö´ ÏùåÏïÖ ÏÑ∏Ìä∏ Ï∂©Îèå', boxX + 15, boxY + 25);

  fill(80, 80, 80, alpha);
  textSize(13);
  let yOffset = boxY + 50;
  for (const line of lines) {
    const trimmed = line.trim();
    if (!trimmed) continue;
    if (trimmed.length > 45) {
      const words = trimmed.split(' ');
      let currentLine = '';
      for (const w of words) {
        const test = currentLine + (currentLine ? ' ' : '') + w;
        if (test.length > 45 && currentLine) {
          text(currentLine, boxX + 15, yOffset);
          yOffset += lineHeight;
          currentLine = w;
        } else {
          currentLine = test;
        }
      }
      if (currentLine) {
        text(currentLine, boxX + 15, yOffset);
        yOffset += lineHeight;
      }
    } else {
      text(trimmed, boxX + 15, yOffset);
      yOffset += lineHeight;
    }
  }

  fill(150, 150, 150, alpha);
  textAlign(CENTER);
  textSize(14);
  text('√ó', boxX + boxWidth - 20, boxY + 20);

  const progressWidth = (warningTimer / 180) * (boxWidth - 20);
  fill(255, 100, 100, alpha * 0.3);
  rect(boxX + 10, boxY + boxHeight - 6, boxWidth - 20, 2);
  fill(255, 100, 100, alpha);
  rect(boxX + 10, boxY + boxHeight - 6, progressWidth, 2);

  pop();

  if (warningTimer <= 0) warningMessage = null;
}

// ÌòÑÏû¨ Î¨¥ÎåÄ ÏïÑÎ∞îÌÉÄÎì§Ïùò Ïã§Ï†ú Ïû¨ÏÉù ÏúÑÏπò Ï∂îÏ†Å
function getCurrentPlaybackPosition() {
  if (playingAvatars.size === 0) return 0;

  for (const avatarId of playingAvatars) {
    const avatar = [...stageAvatars].find(a => a.id === avatarId);
    if (avatar && avatar.musicType) {
      const tonePlayer = tonePlayers[avatar.musicType];
      const p5Sound = musicSamples[avatar.musicType];

      if (p5Sound && p5Sound.isPlaying()) {
        const currentPos = p5Sound.currentTime();
        return currentPos;
      }
      if (tonePlayer && tonePlayer.state === 'started') {
        try {
          const elapsed = Tone.now() - Tone.Transport.seconds;
          const loopDuration = tonePlayer.buffer ? tonePlayer.buffer.duration : 30;
          const currentPos = elapsed % loopDuration;
          return Math.max(0, currentPos);
        } catch (error) {
          console.warn('‚ö†Ô∏è Tone.js ÏúÑÏπò Í≥ÑÏÇ∞ Ïò§Î•ò:', error);
        }
      }
    }
  }

  if (masterClock.isRunning) {
    const currentTime = millis() / 1000.0;
    const elapsed = currentTime - masterClock.startTime;
    return Math.max(0, elapsed);
  }
  return 0;
}

function preload() {
  avatarImage = loadImage('avatar_sample.jpeg'); // Í∏∞Î≥∏ Ìè¥Î∞± Ïù¥ÎØ∏ÏßÄ

  // === Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï ÏïÑÎ∞îÌÉÄ assets Î°úÎìú ===
  // Female avatars (fe.png ~ fe(5).png)
  avatarAssets.female = [];
  avatarAssets.female.push(loadImage('../mobile/assets/fe.png'));
  for (let i = 2; i <= 5; i++) {
    avatarAssets.female.push(loadImage(`../mobile/assets/fe(${i}).png`));
  }

  // Male avatars (ma.png ~ ma(4).png)
  avatarAssets.male = [];
  avatarAssets.male.push(loadImage('../mobile/assets/ma.png'));
  for (let i = 2; i <= 4; i++) {
    avatarAssets.male.push(loadImage(`../mobile/assets/ma(${i}).png`));
  }

  // Head accessories (head.png ~ head(8).png)
  avatarAssets.heads = [];
  avatarAssets.heads.push(loadImage('../mobile/assets/head.png'));
  for (let i = 2; i <= 8; i++) {
    avatarAssets.heads.push(loadImage(`../mobile/assets/head(${i}).png`));
  }

  // Wing
  avatarAssets.wing = loadImage('../mobile/assets/wing.png');

  // === Í≤ÄÏ¶ùÏö© ÏùåÏõêÎì§ ÏßÅÏ†ë Î°úÎìú ===
  musicSamples['Music Sample_Bass.mp3'] = loadSound('Music%20Sample_Bass.mp3',
    () => console.log('‚úÖ Í≤ÄÏ¶ùÏö© Bass ÏùåÏõê Î°úÎìú ÏôÑÎ£å'),
    () => console.error('‚ùå Í≤ÄÏ¶ùÏö© Bass ÏùåÏõê Î°úÎìú Ïã§Ìå®')
  );
  musicSamples['Music Sample_Drum.mp3'] = loadSound('Music%20Sample_Drum.mp3',
    () => console.log('‚úÖ Í≤ÄÏ¶ùÏö© Drum ÏùåÏõê Î°úÎìú ÏôÑÎ£å'),
    () => console.error('‚ùå Í≤ÄÏ¶ùÏö© Drum ÏùåÏõê Î°úÎìú Ïã§Ìå®')
  );
  musicSamples['Music Sample_Lead.mp3'] = loadSound('Music%20Sample_Lead.mp3',
    () => console.log('‚úÖ Í≤ÄÏ¶ùÏö© Lead ÏùåÏõê Î°úÎìú ÏôÑÎ£å'),
    () => console.error('‚ùå Í≤ÄÏ¶ùÏö© Lead ÏùåÏõê Î°úÎìú Ïã§Ìå®')
  );
  musicSamples['Music Sample_Others.mp3'] = loadSound('Music%20Sample_Others.mp3',
    () => console.log('‚úÖ Í≤ÄÏ¶ùÏö© Others ÏùåÏõê Î°úÎìú ÏôÑÎ£å'),
    () => console.error('‚ùå Í≤ÄÏ¶ùÏö© Others ÏùåÏõê Î°úÎìú Ïã§Ìå®')
  );

  // === PCÎ£∏ Í≤åÏûÑÏö© ÏùåÏõêÎì§ Î°úÎìú (6Ìä∏Îûô) ===
  musicSamples['set1_pcroom_gaming_bass.wav'] = loadSound('Music/set1_pcroom_gaming_bass.wav',
    () => console.log('‚úÖ PCÎ£∏ Bass ÏùåÏõê Î°úÎìú ÏôÑÎ£å'),
    () => console.error('‚ùå PCÎ£∏ Bass ÏùåÏõê Î°úÎìú Ïã§Ìå®')
  );
  musicSamples['set1_pcroom_gaming_chord.wav'] = loadSound('Music/set1_pcroom_gaming_chord.wav',
    () => console.log('‚úÖ PCÎ£∏ Chord ÏùåÏõê Î°úÎìú ÏôÑÎ£å'),
    () => console.error('‚ùå PCÎ£∏ Chord ÏùåÏõê Î°úÎìú Ïã§Ìå®')
  );
  musicSamples['set1_pcroom_gaming_drum.wav'] = loadSound('Music/set1_pcroom_gaming_drum.wav',
    () => console.log('‚úÖ PCÎ£∏ Drum ÏùåÏõê Î°úÎìú ÏôÑÎ£å'),
    () => console.error('‚ùå PCÎ£∏ Drum ÏùåÏõê Î°úÎìú Ïã§Ìå®')
  );
  musicSamples['set1_pcroom_gaming_fx.wav'] = loadSound('Music/set1_pcroom_gaming_fx.wav',
    () => console.log('‚úÖ PCÎ£∏ FX ÏùåÏõê Î°úÎìú ÏôÑÎ£å'),
    () => console.error('‚ùå PCÎ£∏ FX ÏùåÏõê Î°úÎìú Ïã§Ìå®')
  );
  musicSamples['set1_pcroom_gaming_lead.wav'] = loadSound('Music/set1_pcroom_gaming_lead.wav',
    () => console.log('‚úÖ PCÎ£∏ Lead ÏùåÏõê Î°úÎìú ÏôÑÎ£å'),
    () => console.error('‚ùå PCÎ£∏ Lead ÏùåÏõê Î°úÎìú Ïã§Ìå®')
  );
  musicSamples['set1_pcroom_gaming_sub.wav'] = loadSound('Music/set1_pcroom_gaming_sub.wav',
    () => console.log('‚úÖ PCÎ£∏ Sub ÏùåÏõê Î°úÎìú ÏôÑÎ£å'),
    () => console.error('‚ùå PCÎ£∏ Sub ÏùåÏõê Î°úÎìú Ïã§Ìå®')
  );
}

async function initTonePlayers() {
  if (typeof Tone !== 'undefined') {
    try {
      tonePlayers.lead = new Tone.Player('Music%20Sample_Lead.mp3').toDestination();
      tonePlayers.drum = new Tone.Player('Music%20Sample_Drum.mp3').toDestination();
      tonePlayers.bass = new Tone.Player('Music%20Sample_Bass.mp3').toDestination();
      tonePlayers.others = new Tone.Player('Music%20Sample_Others.mp3').toDestination();

      Object.values(tonePlayers).forEach(player => { player.loop = true; });
      console.log('‚úÖ Tone.js ÌîåÎ†àÏù¥Ïñ¥Îì§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    } catch (error) {
      console.error('‚ùå Tone.js ÌîåÎ†àÏù¥Ïñ¥ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
    }
  }
}
<<<<<<< Updated upstream
// === ÌîΩÏÖÄ ÎØ∏ÎîîÏñ¥ÏïÑÌä∏ Ï†ÑÏó≠ ===
let mediaArt = {
  enabled: true,
  // Ïä§ÌÅ¨Î¶∞ 3Í∞ú Í∞ÅÍ∞ÅÏùò Ï†ÄÌï¥ÏÉÅÎèÑ ÌîΩÏÖÄ Î≤ÑÌçº
  buffers: [],
  // Í∞Å Î≤ÑÌçºÏùò ÎÖºÎ¶¨ Ìï¥ÏÉÅÎèÑ (ÌîΩÏÖÄ ÎäêÎÇå ÏúÑÌï¥ ÏùòÎèÑÏ†ÅÏúºÎ°ú ÎÇÆÏ∂§)
  w: 128, h: 64,
  // Ïò§ÎîîÏò§ Î∂ÑÏÑùÍ∏∞
  fft: null,
  // ÌååÌã∞ÌÅ¥(Ï†ê)Îì§ ‚Äì Ïä§ÌÅ¨Î¶∞Î≥ÑÎ°ú Î≥ÑÎèÑ Î≥¥Ïú†
  particles: [[], [], []],
  // Perlin Ïù¥ÎèôÏö© ÏãúÍ∞Ñ
  t: 0
};
mediaArt.activeShapes = [[], [], []]; // Í∞Å ÏöîÏÜåÎäî {ownerId, musicType, shape, hue, x, y, baseSize}

=======
>>>>>>> Stashed changes

function setup() {
  createCanvas(2560, 1760);
  cameraX = 0; cameraY = 0;
  window.scrollTo(0, 0);
  initTonePlayers();

  // Í≤ÄÏ¶ùÏö© ÏïÑÎ∞îÌÉÄ 4Í∞ú (Music Sample)
  const verificationTypes = ['Music Sample_Lead.mp3', 'Music Sample_Drum.mp3', 'Music Sample_Bass.mp3', 'Music Sample_Others.mp3'];
  const verificationLabels = ['Lead', 'Drum', 'Bass', 'Others'];

  for (let i = 0; i < 4; i++) {
    stageAvatars.push({
      id: 'verification_avatar_' + i,
      nickname: `Í≤ÄÏ¶ùÏö© (${verificationLabels[i]})`,
      x: random(200, 1200),
      y: random(900, 1500),
      vx: random(-1, 1),
      vy: random(-1, 1),
      direction: random() > 0.5 ? 1 : -1,
      walkTimer: random(60, 240),
      idleTimer: 0,
      currentAction: 'walking',
      state: 'idle',
      category: 'Í≥µÏó∞',
      memory: `Í≤ÄÏ¶ùÏö© ÏïÑÎ∞îÌÉÄ ${i + 1}Î≤àÏûÖÎãàÎã§. ${verificationLabels[i]} ÌååÌä∏Î•º Îã¥ÎãπÌï©ÎãàÎã§!`,
      keywords: ['Í≤ÄÏ¶ù', 'Î¨¥ÎåÄ', 'ÏùåÏïÖ', verificationLabels[i].toLowerCase()],

      musicPosition: verificationLabels[i],
      selectedRecipe: { name: 'Ïã§ÌóòÏö©', description: 'Í≤ÄÏ¶ù Î∞è Ïã§ÌóòÏùÑ ÏúÑÌïú Î†àÏãúÌîº' },
      extractedKeywords: ['Í≤ÄÏ¶ù', 'Î¨¥ÎåÄ', 'ÏùåÏïÖ', verificationLabels[i].toLowerCase()],

      isDragged: false,
      dragElevation: 0,
      dropBounce: 0,
      dropBounceVel: 0,
      baseY: 0,
      clickTimer: 0,
      isClicked: false,

      isOnStage: false,
      stageSlot: -1,
      isSpecial: true,

      musicType: verificationTypes[i],
      musicSet: 'verification',

      isPending: false,
      pendingStartTime: 0
    });
  }

  // PCÎ£∏ Í≤åÏûÑÏö© ÏïÑÎ∞îÌÉÄ 6Í∞ú (set1_pcroom_gaming)
  const pcRoomTypes = [
    'set1_pcroom_gaming_bass.wav',
    'set1_pcroom_gaming_chord.wav',
    'set1_pcroom_gaming_drum.wav',
    'set1_pcroom_gaming_fx.wav',
    'set1_pcroom_gaming_lead.wav',
    'set1_pcroom_gaming_sub.wav'
  ];
  const pcRoomLabels = ['Bass', 'Chord', 'Drum', 'FX', 'Lead', 'Sub'];

  for (let i = 0; i < 6; i++) {
    stageAvatars.push({
      id: 'pcroom_avatar_' + i,
      nickname: `PCÎ∞© (${pcRoomLabels[i]})`,
      x: random(1400, 2360),
      y: random(900, 1500),
      vx: random(-1, 1),
      vy: random(-1, 1),
      direction: random() > 0.5 ? 1 : -1,
      walkTimer: random(60, 240),
      idleTimer: 0,
      currentAction: 'walking',
      state: 'idle',
      category: 'Í≤åÏûÑ',
      memory: `PCÎ∞©ÏóêÏÑú Í≤åÏûÑÌïòÎ©∞ ÎßåÎì† Ï∂îÏñµÏûÖÎãàÎã§. ${pcRoomLabels[i]} ÌååÌä∏Î•º Îã¥ÎãπÌï©ÎãàÎã§!`,
      keywords: ['Í≤åÏûÑ', 'PCÎ∞©', 'ÏùåÏïÖ', pcRoomLabels[i].toLowerCase()],

      musicPosition: pcRoomLabels[i],
      selectedRecipe: { name: 'PCÎ∞© Ï°∞Ìï©Î≤ï', description: 'Í≤åÏûÑÍ≥º Ïñ¥Ïö∏Î¶¨Îäî ÎîîÏßÄÌÑ∏ ÏÇ¨Ïö¥Îìú' },
      extractedKeywords: ['Í≤åÏûÑ', 'PCÎ∞©', 'ÎîîÏßÄÌÑ∏', 'ÏÇ¨Ïö¥Îìú', pcRoomLabels[i].toLowerCase()],

      isDragged: false,
      dragElevation: 0,
      dropBounce: 0,
      dropBounceVel: 0,
      baseY: 0,
      clickTimer: 0,
      isClicked: false,

      isOnStage: false,
      stageSlot: -1,
      isSpecial: true,

      musicType: pcRoomTypes[i],
      musicSet: 'pcroom_gaming',

      isPending: false,
      pendingStartTime: 0
    });
  }

  // === ÌîΩÏÖÄ Î≤ÑÌçº/FFT Ï¥àÍ∏∞Ìôî ===
  noSmooth();
  mediaArt.buffers = [createGraphics(mediaArt.w, mediaArt.h),
                      createGraphics(mediaArt.w, mediaArt.h),
                      createGraphics(mediaArt.w, mediaArt.h)];
  mediaArt.buffers.forEach(g => { g.noSmooth(); g.noStroke(); g.colorMode(HSB, 360, 100, 100, 100); });
  mediaArt.fft = new p5.FFT(0.8, 1024);

  // ÌååÌã∞ÌÅ¥(Î≥ÑÏ†ê) ÏãúÎìú
  for (let s = 0; s < 3; s++) {
    for (let i = 0; i < 120; i++) {
      mediaArt.particles[s].push({
        x: random(mediaArt.w), y: random(mediaArt.h),
        vx: random(-0.2, 0.2), vy: random(-0.2, 0.2),
        hue: random(200, 320),
        size: random(1, 2.2),
        nseed: random(1000)
      });
    }
  }
}

function isPCRoomPlaying() {
  const pcRoomOnStage = stageAvatars.filter(a =>
    a.isOnStage && a.musicType && a.musicType.includes('_gaming_')
  );
  if (pcRoomOnStage.length === 0) return false;

  for (const a of pcRoomOnStage) {
    const s = musicSamples[a.musicType];
    if (s && s.isPlaying && s.isPlaying()) return true;
  }
  return false;
}

// Firebase Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
onSnapshot(collection(db, 'memories'), (snapshot) => {
  snapshot.docChanges().forEach(change => {
    if (change.type === 'added') {
      const docData = change.doc.data();
      const avatar = docData.avatar || {};

      avatar.id = change.doc.id;
      avatar.nickname = docData.nickname;
      avatar.memory = docData.memory;
      avatar.category = docData.category;
<<<<<<< HEAD

      // ÏõêÎ≥∏ Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï Îç∞Ïù¥ÌÑ∞Î•º Î≥ÑÎèÑ Î≥¥Í¥Ä
      avatar.customData = docData.avatar;

      // ÏùåÏïÖ Ìè¨ÏßÄÏÖò/ÏÑ∏Ìä∏ (ÏûàÏúºÎ©¥ Ï†ÅÏö©)
=======
      
      // ‚ú® Ï§ëÏöî: ÏõêÎ≥∏ ÏïÑÎ∞îÌÉÄ Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï Îç∞Ïù¥ÌÑ∞Î•º Î≥ÑÎèÑ ÌïÑÎìúÎ°ú Ï†ÄÏû•
      avatar.customData = docData.avatar; // Ïó¨Í∏∞Ïóê Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï Ï†ïÎ≥¥Í∞Ä ÏûàÏñ¥Ïïº Ìï®
      
      // Ïª§Ïä§ÌÖÄ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÍ≥†, bodyIdxÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå Î™∏Ï≤¥ Î∞∞Ï†ï
      if (avatar.customData && typeof avatar.customData === 'object') {
        // bodyIdxÍ∞Ä ÏóÜÍ±∞ÎÇò Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ÏóêÎßå Î™∏Ï≤¥ Î∞∞Ï†ï
        if (avatar.customData.bodyIdx === null || avatar.customData.bodyIdx === undefined || 
            avatar.customData.bodyIdx < 0 || avatar.customData.bodyIdx > 4) {
          avatar.customData.bodyIdx = Math.floor(Math.random() * 5);
          console.log('üîß Î™∏Ï≤¥Îßå ÏàòÏ†ï:', avatar.nickname, 'bodyIdx:', avatar.customData.bodyIdx);
        }
        
        // genderÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï (Î™∏Ï≤¥ Î†åÎçîÎßÅÏóê ÌïÑÏöî)
        if (!avatar.customData.gender || (avatar.customData.gender !== 'male' && avatar.customData.gender !== 'female')) {
          avatar.customData.gender = Math.random() > 0.5 ? 'female' : 'male';
          console.log('üîß ÏÑ±Î≥ÑÎßå ÏàòÏ†ï:', avatar.nickname, 'gender:', avatar.customData.gender);
        }
      } else if (!avatar.customData || typeof avatar.customData !== 'object') {
        // customDataÍ∞Ä ÏïÑÏòà ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå Í∏∞Î≥∏ Î™∏Ï≤¥Îßå ÏÑ§Ï†ï
        avatar.customData = {
          gender: Math.random() > 0.5 ? 'female' : 'male',
          bodyIdx: Math.floor(Math.random() * 5), // Î™∏Ï≤¥Îßå ÏÑ§Ï†ï
          // headIdx, wingOn Îì±ÏùÄ ÏÑ§Ï†ïÌïòÏßÄ ÏïäÏùå
        };
        console.log('üé≠ Í∏∞Î≥∏ Î™∏Ï≤¥Îßå Ï∂îÍ∞Ä:', avatar.nickname, avatar.customData);
      }
      
      // ÏùåÏïÖ Ìè¨ÏßÄÏÖò Ï†ïÎ≥¥ Ï∂îÍ∞Ä
>>>>>>> fc9b42c0aec4b7ab0a037f3b4f6815143baede90
      avatar.musicPosition = docData.musicPosition || '-';
      if (docData.musicSet) avatar.musicSet = docData.musicSet;

      if (docData.keywords) {
        avatar.keywords = docData.keywords;
      } else {
        const categoryKeywords = {
          'ÏÇ¨ÏßÑ': ['Ï∂îÏñµ', 'ÏàúÍ∞Ñ', 'ÏÜåÏ§ëÌï®'],
          'ÏùåÏïÖ': ['Î©úÎ°úÎîî', 'Í∞êÎèô', 'Î¶¨Îì¨'],
          'ÏòÅÌôî': ['Ïä§ÌÜ†Î¶¨', 'Í∞êÎèô', 'Ïó¨Ïö¥'],
          'ÏùåÏãù': ['Îßõ', 'Ìñ•', 'ÎßåÏ°±'],
          'Ïó¨Ìñâ': ['Î™®Ìóò', 'Í≤ΩÌóò', 'ÌûêÎßÅ'],
          'ÏùºÎ∞ò': ['Í∏∞Ïñµ', 'ÏÜåÏ§ëÌï®', 'ÏùòÎØ∏']
        };
        avatar.keywords = categoryKeywords[docData.category] || categoryKeywords['ÏùºÎ∞ò'];
      }

      avatar.x = -100;
      avatar.y = 1120;
      avatar.vx = 6;
      avatar.state = 'plane-in';
      avatar.direction = 1;
      avatar.walkTimer = 0;
      avatar.idleTimer = 0;
      avatar.currentAction = 'walking';

      avatar.isDragged = false;
      avatar.dragElevation = 0;
      avatar.dropBounce = 0;
      avatar.dropBounceVel = 0;
      avatar.baseY = avatar.y;
      avatar.clickTimer = 0;
      avatar.isClicked = false;

      avatar.isOnStage = false;
      avatar.stageSlot = -1;
      avatar.isSpecial = true;

      avatars.push(avatar);
    }
  });
});

function draw() {
  background('#222');

  // Ïπ¥Î©îÎùº Î≥ÄÌôò
  push();
  translate(-cameraX, -cameraY);

  // ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ ÏóÖÎç∞Ïù¥Ìä∏
  updateMasterClock();

  // Ï†ïÎ†¨ Ïï†ÎãàÎ©îÏù¥ÏÖò
  updateSortingAnimations();

  // Í≥µÍ∞Ñ Î†åÎçî
  drawSpaces();
  drawSampleAvatars();

  // Î¨¥ÎåÄ ÏïÑÎ∞îÌÉÄÎì§
  stageAvatars.forEach(avatar => {
    updateAvatar(avatar);
    drawAvatar(avatar);
  });

  // ÏùºÎ∞ò ÏïÑÎ∞îÌÉÄÎì§
  avatars.forEach(avatar => {
    updateAvatar(avatar);
    drawAvatar(avatar);
  });

  pop();

  // UI
  updatePanningUI();
  drawMusicSetInfo();
  drawWarningMessage();

  if (masterClock.isRunning) {
    drawMusicDebugInfo();
  }
}

function updateAvatar(avatar) {
  if (avatar.state === 'plane-in') {
    avatar.x += avatar.vx;
    if (avatar.x > 2560 / 2) {
      avatar.state = 'idle';
      avatar.vx = 0; avatar.vy = 0;
      avatar.currentAction = 'idle';
      avatar.idleTimer = random(60, 180);
    }
    return;
  }

  if (avatar.state === 'idle') {
    if (avatar.isOnStage) return;

    if (avatar.currentAction === 'stopped') {
      // Î©àÏ∂§
    } else if (avatar.currentAction === 'idle') {
      avatar.idleTimer--;
      if (avatar.idleTimer <= 0) {
        const directions = [{dx:1,dy:0},{dx:-1,dy:0},{dx:0,dy:1},{dx:0,dy:-1}];
        const dir = random(directions);
        avatar.vx = dir.dx * random(0.5, 1.5);
        avatar.vy = dir.dy * random(0.5, 1.5);
        avatar.direction = avatar.vx > 0 ? 1 : (avatar.vx < 0 ? -1 : avatar.direction);
        avatar.currentAction = 'walking';
        avatar.walkTimer = random(60, 240);
      }
    } else if (avatar.currentAction === 'walking') {
      avatar.walkTimer--;
      avatar.x += avatar.vx;
      avatar.y += avatar.vy;
      if (avatar.walkTimer <= 0) {
        avatar.vx = 0; avatar.vy = 0;
        avatar.currentAction = 'idle';
        avatar.idleTimer = random(30, 120);
      }
    }

    if (avatar.x < 0 || avatar.x > 2560) {
      avatar.vx *= -1;
      avatar.direction *= -1;
      avatar.x = constrain(avatar.x, 0, 2560);
    }
    if (avatar.y < 480 || avatar.y > 1760) {
      avatar.vy *= -1;
      avatar.y = constrain(avatar.y, 480, 1760);
    }

    // Î¨¥ÎåÄ ÏòÅÏó≠ Î∞ÄÏñ¥ÎÇ¥Í∏∞(Î¨¥ÎåÄÏïÑÎ∞îÌÉÄ Ï†úÏô∏)
    if (!avatar.isOnStage && !avatar.isDragged) {
      const stageLeft = 853, stageRight = 1707, stageTop = 480, stageBottom = 800;
      if (avatar.y >= stageTop && avatar.y <= stageBottom && avatar.x >= stageLeft && avatar.x <= stageRight) {
        const centerX = (stageLeft + stageRight) / 2;
        const centerY = (stageTop + stageBottom) / 2;
        const dx = avatar.x - centerX;
        const dy = avatar.y - centerY;
        if (Math.abs(dx) > Math.abs(dy)) {
          avatar.vx *= -1;
          avatar.direction *= -1;
          avatar.x = dx > 0 ? stageRight + 5 : stageLeft - 5;
        } else {
          avatar.vy *= -1;
          avatar.y = dy > 0 ? stageBottom + 5 : stageTop - 5;
        }
      }
    }
  }

  // ÎìúÎûòÍ∑∏ Ïï†ÎãàÎ©îÏù¥ÏÖò
  if (avatar.isClicked) {
    avatar.clickTimer++;
    if (avatar.clickTimer > 6 && avatar.isDragged) {
      if (avatar.dragElevation < 12) avatar.dragElevation += 4;
    }
  } else {
    if (avatar.dropBounce !== 0) {
      avatar.dropBounce += avatar.dropBounceVel;
      avatar.dropBounceVel += 1.2;
      if (avatar.dropBounce >= 0) {
        avatar.dropBounce = 0;
        avatar.dropBounceVel *= -0.4;
        if (Math.abs(avatar.dropBounceVel) < 0.5) avatar.dropBounceVel = 0;
      }
    }
    if (avatar.dragElevation > 0) {
      avatar.dragElevation -= 3;
      if (avatar.dragElevation < 0) avatar.dragElevation = 0;
    }
  }
}

function drawAvatar(avatar) {
  if (avatar.state === 'plane-in') {
    push();
    fill('#eee');
    stroke('#888');
    translate(avatar.x, avatar.y);
    triangle(0, -40, 160, 0, 0, 40);
    pop();
    return;
  }

  const currentY = avatar.y - avatar.dragElevation + avatar.dropBounce;

  if (avatar.isClicked && avatar.clickTimer > 6 && avatar.dragElevation > 0) {
    push();
    fill(0, 0, 0, 50);
    noStroke();
    ellipse(avatar.x, avatar.y + 32, 50 - avatar.dragElevation, 15 - avatar.dragElevation/3);
    pop();
  }

<<<<<<< Updated upstream
  // ÏïÑÎ∞îÌÉÄ Í∑∏Î¶¨Í∏∞ - Stage ÏïÑÎ∞îÌÉÄÏôÄ ÏÇ¨Ïö©Ïûê ÏïÑÎ∞îÌÉÄ Íµ¨Î∂Ñ
  if (avatar.musicType) {
    // Stage ÏïÑÎ∞îÌÉÄÎì§ (musicTypeÏù¥ ÏûàÎäî Í≤ΩÏö∞) - avatar_sample.jpeg ÏÇ¨Ïö©
=======
<<<<<<< HEAD
  // Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï ÏïÑÎ∞îÌÉÄÎ©¥ Ïù¥ÎØ∏ÏßÄ Ìï©ÏÑ± Î†åÎçî, ÏïÑÎãàÎ©¥ Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄ
  if (avatar.customData && typeof avatar.customData === 'object') {
    drawCustomAvatar(avatar.x, currentY, avatar.customData, avatar.direction, showPopup && popupAvatar && popupAvatar.id === avatar.id);
  } else {
=======
  // ÏïÑÎ∞îÌÉÄ Í∑∏Î¶¨Í∏∞ - Stage ÏïÑÎ∞îÌÉÄÏôÄ ÏÇ¨Ïö©Ïûê ÏïÑÎ∞îÌÉÄ Íµ¨Î∂Ñ
  if (avatar.musicType) {
    // Stage ÏïÑÎ∞îÌÉÄÎì§ (musicTypeÏù¥ ÏûàÎäî Í≤ΩÏö∞) - avatar_sample.jpeg ÏÇ¨Ïö©
>>>>>>> fc9b42c0aec4b7ab0a037f3b4f6815143baede90
>>>>>>> Stashed changes
    push();
    translate(avatar.x, currentY);
    if (avatar.direction === -1) scale(-1, 1);
    imageMode(CENTER);
    if (showPopup && popupAvatar && popupAvatar.id === avatar.id) {
      fill(255, 215, 0, 150);
      ellipse(0, 0, 90, 90);
      image(avatarImage, 0, 0, 80, 80);
    } else {
      image(avatarImage, 0, 0, 64, 64);
    }
    pop();
  } else if (avatar.customData && typeof avatar.customData === 'object') {
    // Î™®Î∞îÏùºÏóêÏÑú Ïª§Ïä§ÌÑ∞ÎßàÏù¥ÏßïÌïú ÏïÑÎ∞îÌÉÄ Î†åÎçîÎßÅ
    drawCustomAvatar(avatar.x, currentY, avatar.customData, avatar.direction, showPopup && popupAvatar && popupAvatar.id === avatar.id);
  } else {
    // customDataÍ∞Ä ÏóÜÎäî ÏÇ¨Ïö©Ïûê ÏïÑÎ∞îÌÉÄÏùò Í≤ΩÏö∞ Í∏∞Î≥∏ ÏïÑÎ∞îÌÉÄ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (ID Í∏∞Î∞òÏúºÎ°ú Í≥†Ï†ï)
    if (!avatar.defaultCustomData) {
      // ÏïÑÎ∞îÌÉÄ IDÎ•º Í∏∞Î∞òÏúºÎ°ú Ìïú Í∞ÑÎã®Ìïú Ìï¥Ïãú ÏÉùÏÑ±
      let hash = 0;
      const idStr = avatar.id || 'default';
      for (let i = 0; i < idStr.length; i++) {
        hash = ((hash << 5) - hash + idStr.charCodeAt(i)) & 0xffffffff;
      }
      
      // Ìï¥ÏãúÎ•º Í∏∞Î∞òÏúºÎ°ú Í≥†Ï†ïÎêú ÎûúÎç§Í∞í ÏÉùÏÑ±
      const seedRandom = (seed) => {
        const x = Math.sin(seed) * 10000;
        return x - Math.floor(x);
      };
      
      avatar.defaultCustomData = {
        gender: seedRandom(hash) > 0.5 ? 'female' : 'male',
        bodyIdx: Math.floor(seedRandom(hash + 2) * 5), // Î™∏Ï≤¥Îßå ÏÑ§Ï†ï
        // headIdx, wingOn Îì±ÏùÄ ÏÑ§Ï†ïÌïòÏßÄ ÏïäÏùå (Í∏∞Î≥∏ Î™∏Ï≤¥Îßå)
      };
    }
    // Í∏∞Î≥∏ ÏïÑÎ∞îÌÉÄ Îç∞Ïù¥ÌÑ∞Î°ú Î†åÎçîÎßÅ
    drawCustomAvatar(avatar.x, currentY, avatar.defaultCustomData, avatar.direction, showPopup && popupAvatar && popupAvatar.id === avatar.id);
  }

  // ÎãâÎÑ§ÏûÑ
  push();
  textAlign(CENTER, BOTTOM);
  textSize(12);
  fill(255);
  stroke(0);
  strokeWeight(3);
  text(avatar.nickname || 'ÏÇ¨Ïö©Ïûê', avatar.x, currentY - 37);
  noStroke();
  fill(255);
  text(avatar.nickname || 'ÏÇ¨Ïö©Ïûê', avatar.x, currentY - 37);
  pop();
}

// Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï ÏïÑÎ∞îÌÉÄ Î†åÎçî
function drawCustomAvatar(x, y, avatarData, direction, isHighlighted) {
  push();
  translate(x, y);
  if (direction === -1) scale(-1, 1);
  imageMode(CENTER);

  if (isHighlighted) {
    fill(255, 215, 0, 150);
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
    ellipse(0, 0, 90, 90); // Í∞ïÏ°∞
  }

  const scale_factor = 0.5;

  // Wing (Îí§)
=======
>>>>>>> Stashed changes
    ellipse(0, 0, 77, 77); // ÌïòÏù¥ÎùºÏù¥Ìä∏ ÌÅ¨Í∏∞ÎèÑ 1.1Î∞∞ Ï¶ùÍ∞Ä (70 * 1.1 = 77)
  }
  
  const scale_factor = 0.418; // ÌÅ¨Í∏∞Î•º 1.1Î∞∞ Ï¶ùÍ∞Ä (0.38 * 1.1 ‚âà 0.418)
  
  // Ïù¥ÎØ∏ÏßÄ Î™®ÎìúÎ•º CENTERÎ°ú ÏÑ§Ï†ï
  imageMode(CENTER);
  
  // Wing (Îí§Ïóê Í∑∏Î¶¨Í∏∞)
>>>>>>> fc9b42c0aec4b7ab0a037f3b4f6815143baede90
  if (avatarData.wingOn && avatarAssets.wing) {
    const wingOffsetX = avatarData.gender === 'female' ? -2.3 : -1.5;
    const wingOffsetY = avatarData.gender === 'female' ? -4 : -3;
    image(avatarAssets.wing, wingOffsetX, wingOffsetY, 190 * scale_factor, 190 * scale_factor);
  }

  // Body
  const bodyImages = avatarData.gender === 'female' ? avatarAssets.female : avatarAssets.male;
  if (bodyImages && bodyImages[avatarData.bodyIdx]) {
    const bodyOffsetY = 0;
    image(bodyImages[avatarData.bodyIdx], 0, bodyOffsetY, 176 * scale_factor, 176 * scale_factor);
  } else {
    // Ìè¥Î∞±: Í∏∞Î≥∏ ÏõêÌòï Î∞îÎîî(Í±∞Ïùò Ïïà Î≥¥Ïùº Ïùº)
    fill('#ffdbac');
    noStroke();
    ellipse(0, 5, 50 * scale_factor, 60 * scale_factor);
  }

  // Head (Ïïû)
  if (avatarData.headIdx !== null && avatarData.headIdx !== undefined && avatarAssets.heads[avatarData.headIdx]) {
    const headOffsetX = 0;
    const headOffsetY = avatarData.gender === 'female' ? -6 : -6;
    image(avatarAssets.heads[avatarData.headIdx], headOffsetX, headOffsetY, 176 * scale_factor, 176 * scale_factor);
  }

  pop();
}

// Ïä§ÌÖåÏù¥ÏßÄ/Í≥µÍ∞Ñ
function getStageSlotPosition(slotIndex) {
  const stageW = 2560 / 3;
  const stageX = (2560 - stageW) / 2;
  const stageY = 640;
  const spacing = stageW / 7;
  return { x: stageX + spacing * (slotIndex + 1), y: stageY };
}

function findNearestEmptyStageSlot(x, y) {
  let nearestSlot = -1;
  let minDistance = Infinity;
  for (let i = 0; i < 6; i++) {
    if (stageSlots[i] === null) {
      const slotPos = getStageSlotPosition(i);
      const distance = dist(x, y, slotPos.x, slotPos.y);
      if (distance < minDistance) {
        minDistance = distance;
        nearestSlot = i;
      }
    }
  }
  return nearestSlot;
}

function isInStageArea(x, y) {
  const stageLeft = 853, stageRight = 1707, stageTop = 480, stageBottom = 800;
  return x >= stageLeft && x <= stageRight && y >= stageTop && y <= stageBottom;
}

function drawSpaces() {
  // Ïä§ÌÅ¨Î¶∞ ÏòÅÏó≠(ÏÉÅÎã®)
  fill('#cccccc');
  rect(0, 0, 2560, 480);

  // Î¨¥ÎåÄ (Í∞ÄÏö¥Îç∞ 1/3)
  const stageW = 2560 / 3;
  const stageX = (2560 - stageW) / 2;
  fill('#a67c52');
  rect(stageX, 480, stageW, 320);

  // ÏûêÏú† Í≥µÍ∞Ñ
  fill('#7ecbff');
  noStroke();
  rect(0, 800, 2560, 960);
  rect(0, 480, stageX, 320);
  rect(stageX + stageW, 480, stageX, 320);

  // Ïä§ÌÅ¨Î¶∞ 3Î∂ÑÌï† ÌëúÏãúÏÑ†
  stroke('#888');
  strokeWeight(2);
  for (let i = 1; i < 3; i++) {
    line((2560 / 3) * i, 0, (2560 / 3) * i, 480);
  }
  noStroke();

  // ÌîΩÏÖÄ ÎØ∏ÎîîÏñ¥ÏïÑÌä∏ Ï∂úÎ†•
  renderMediaArtScreens();
}

<<<<<<< Updated upstream
=======
// === ÏÑ∏Ìä∏/ÌÖåÎßàÎ≥Ñ ÌîΩÏÖÄ ÎØ∏ÎîîÏñ¥ÏïÑÌä∏ ===
function renderMediaArtScreens() {
  if (!mediaArt.enabled) return;

  const themeId = getCurrentStageThemeId();
  const playing = isPCRoomPlaying();

  // Ïä§ÌéôÌä∏Îüº Ï∂îÏ∂ú
  const spectrum = mediaArt.fft.analyze();
  const bass = mediaArt.fft.getEnergy(20, 120) / 255;
  const mid  = mediaArt.fft.getEnergy(250, 2000) / 255;
  const high = mediaArt.fft.getEnergy(4000, 12000) / 255;

  mediaArt.t += 0.01;

  const screenRects = [
    { x: 0,               y: 0, w: 2560/3, h: 480 },
    { x: 2560/3,          y: 0, w: 2560/3, h: 480 },
    { x: 2*(2560/3),      y: 0, w: 2560/3, h: 480 }
  ];
  const energies = [
    { e: bass,  name: 'low'  },
    { e: mid,   name: 'mid'  },
    { e: high,  name: 'high' }
  ];

  // ÌÖåÎßàÎ≥Ñ ÏÉâ/Ìå®ÌÑ¥ ÌîÑÎ¶¨ÏÖã (Í∞ÑÎã® Î£∞ Í∏∞Î∞ò)
  const THEME_STYLE = {
    // set1: ÎîîÏßÄÌÑ∏ & Í≤åÏûÑ
    pcroom_gaming:            { baseHue:[200,320], shape:'rect',  glow:true,  motif:'star' },
    home_console_gaming:      { baseHue:[180,220], shape:'rect',  glow:true,  motif:'plus' },
    social_media_memories:    { baseHue:[260,320], shape:'rect',  glow:true,  motif:'heart' },
    photo_album:              { baseHue:[30,  60], shape:'rect',  glow:false, motif:'frame' },
    // set2: ÌôúÎèô & ÏóêÎÑàÏßÄ
    sports_activities:        { baseHue:[10,  40], shape:'rect',  glow:false, motif:'stripe' },
    festivals_events:         { baseHue:[0,  360], shape:'rect',  glow:true,  motif:'confetti' },
    summer_memories:          { baseHue:[40,  80], shape:'rect',  glow:true,  motif:'sun' },
    travel_places:            { baseHue:[160,220], shape:'rect',  glow:false, motif:'wave' },
    // set3: Îî∞ÎúªÌï® & ÏÜåÌÜµ
    family_warmth:            { baseHue:[10,  20], shape:'rect',  glow:false, motif:'round' },
    school_memories:          { baseHue:[200,240], shape:'rect',  glow:false, motif:'grid' },
    food_snacks:              { baseHue:[10,  40], shape:'rect',  glow:true,  motif:'dot' },
    spring_memories:          { baseHue:[80, 120], shape:'rect',  glow:false, motif:'petal' },
    // set4: Í∞êÏÑ± & Î¨∏Ìôî
    nostalgia_longing:        { baseHue:[300,340], shape:'rect',  glow:false, motif:'vignette' },
    night_dawn:               { baseHue:[220,260], shape:'rect',  glow:true,  motif:'moon' },
    entertainment_culture:    { baseHue:[260,300], shape:'rect',  glow:true,  motif:'film' },
    karaoke_music:            { baseHue:[280,320], shape:'rect',  glow:true,  motif:'note' },
    // set5: Ï∞ΩÏùòÏÑ± & Í≥ÑÏ†àÍ∞ê
    art_creative:             { baseHue:[0,  360], shape:'rect',  glow:true,  motif:'splash' },
    study_reading:            { baseHue:[30,  60], shape:'rect',  glow:false, motif:'page' },
    autumn_memories:          { baseHue:[20,  40], shape:'rect',  glow:false, motif:'leaf' },
    winter_memories:          { baseHue:[180,220], shape:'rect',  glow:true,  motif:'snow' },
    // Ìè¥Î∞±
    verification:             { baseHue:[200,220], shape:'rect',  glow:false, motif:'grid' }
  };
  const style = THEME_STYLE[themeId] || THEME_STYLE.verification;

  for (let i = 0; i < 3; i++) {
    const g = mediaArt.buffers[i];
    const e = energies[i].e;

    // Î∞∞Í≤Ω Î∞ùÍ∏∞ (Ïû¨ÏÉù Ïãú Í∞ÄÏÇ∞)
    const baseB = playing ? 8 + e * 28 : 6;
    g.background(0, 0, baseB, 100);

    // ÌååÌã∞ÌÅ¥(ÌîΩÏÖÄ) ÏóÖÎç∞Ïù¥Ìä∏ (Perlin + ÏóêÎÑàÏßÄ Î∞òÏùë)
    for (const p of mediaArt.particles[i]) {
      const nx = noise(p.nseed, mediaArt.t) - 0.5;
      const ny = noise(p.nseed + 100, mediaArt.t) - 0.5;
      const speedMul = 0.4 + e * 2.0;
      p.x += (p.vx + nx * 0.7) * speedMul;
      p.y += (p.vy + ny * 0.7) * speedMul;

      if (p.x < 0) p.x += mediaArt.w;
      if (p.x >= mediaArt.w) p.x -= mediaArt.w;
      if (p.y < 0) p.y += mediaArt.h;
      if (p.y >= mediaArt.h) p.y -= mediaArt.h;

      // ÌÖåÎßà hue ÎåÄÏó≠ Ï†ÅÏö©
      const hueRange = style.baseHue;
      const baseHue = map(i, 0, 2, hueRange[0], hueRange[1]);
      const hueJitter = (noise(p.nseed + mediaArt.t) - 0.5) * 30;
      const hue = (baseHue + hueJitter + 360) % 360;

      const sz = p.size * (1 + e * 2.0);
      const alpha = playing ? 60 + e * 40 : 25;

      // ÎÑ§Ïò® Í∏ÄÎ°úÏö∞(ÏÑ†ÌÉù)
      if (style.glow) {
        g.fill(hue, 80 + e * 20, 70 + e * 30, alpha);
        g.rect(p.x, p.y, sz, sz);
        g.fill(hue, 80 + e * 20, 100, alpha * 0.6);
        g.rect(p.x + 0.5, p.y + 0.5, sz, sz);
      } else {
        g.fill(hue, 60 + e * 10, 70 + e * 20, alpha);
        g.rect(p.x, p.y, sz, sz);
      }
    }

    // ÌÖåÎßà Î™®Ìã∞ÌîÑ(Í∞ÑÎã® Ï†êÎ¨ò) ‚Äì ÏóêÎÑàÏßÄÍ∞Ä ÎÜíÏùÑÏàòÎ°ù Í∞ïÏ°∞
    if (playing && e > 0.05) {
      g.push();
      const cx = mediaArt.w * 0.5;
      const cy = mediaArt.h * 0.5;
      g.translate(cx, cy);
      g.rotate(frameCount * 0.002 * (i + 1));

      const motifCount = 28 + Math.floor(e * 60);
      for (let k = 0; k < motifCount; k++) {
        const ang = k * (TWO_PI / motifCount);
        const rad = 6 + e * 22 + noise(i, k, mediaArt.t) * 10;
        const mx = cos(ang) * rad;
        const my = sin(ang) * rad;

        // motifÏóê Îî∞Î•∏ Î∞ùÍ∏∞/Î™®Ïñë Î∂ÑÍ∏∞(Í∞ÑÎã®Ìôî)
        let h = map(i, 0, 2, style.baseHue[0], style.baseHue[1]);
        let s = 90, b = 100, a = 40 + e * 50;
        if (style.motif === 'moon') { b = 95; }
        if (style.motif === 'leaf') { h = 30; s = 70; }
        if (style.motif === 'snow') { h = 200; s = 10; b = 100; }
        if (style.motif === 'sun')  { h = 50; s = 90; b = 100; }

        g.fill(h, s, b, a);
        const px = 1 + e * 2;
        g.rect(mx, my, px, px);
      }
      g.pop();
    }

    // ÏóÖÏä§ÏºÄÏùº Ï∂úÎ†•
    const dst = screenRects[i];
    push();
    translate(dst.x, dst.y);
    image(mediaArt.buffers[i], 0, 0, dst.w, dst.h);
    pop();
  }
}
>>>>>>> Stashed changes

// Îπà Ïä¨Î°Ø ÌëúÏãú
function drawSampleAvatars() {
  for (let i = 0; i < 6; i++) {
    if (stageSlots[i] === null) {
      const slotPos = getStageSlotPosition(i);
      push();
      fill(255, 255, 255, 30);
      noStroke();
      ellipse(slotPos.x, slotPos.y, 70, 70);
      pop();

      push();
      textAlign(CENTER, CENTER);
      textSize(10);
      fill(255, 255, 255, 100);
      text(`SLOT ${i + 1}`, slotPos.x, slotPos.y);
      pop();
    }
  }
}
// ÏùåÏïÖ 6Í∞úÎùºÍ≥† Í∞ÄÏ†ï
const MUSIC_SHAPES = ['star', 'diamond', 'triangle', 'square', 'circle', 'pentagon'];
const MUSIC_HUES   = [40, 200, 310, 0, 160, 260]; // ÏùåÏïÖÎ≥Ñ Í≥†Ï†ï ÏÉâÏÉÅ(H)

<<<<<<< Updated upstream
function initMediaArt(w, h) {
  mediaArt.w = w;
  mediaArt.h = h;
  mediaArt.t = 0;
  mediaArt.buffers = [createGraphics(w, h), createGraphics(w, h), createGraphics(w, h)];
  mediaArt.buffers.forEach(g => { g.colorMode(HSB,360,100,100,100); g.rectMode(CENTER); });

  const total = 600; // Ï†ÑÏ≤¥ ÌååÌã∞ÌÅ¥ Ïàò
  mediaArt.particles = [[], [], []];


}
// (ÏÑ†ÌÉù) Î™ÖÏãú Îß§Ìïë. ÏóÜÏúºÎ©¥ Ìï¥ÏãúÎ°ú ÏïàÏ†ïÏ†ÅÏúºÎ°ú Í≤∞Ï†ïÎê©ÎãàÎã§.
const MUSIC_TO_SHAPE = {
  'Music Sample_Lead.mp3':  'star',
  'Music Sample_Drum.mp3':  'square',
  'Music Sample_Bass.mp3':  'diamond',
  'Music Sample_Others.mp3':'circle',
  'set1_pcroom_gaming_bass.wav':  'pentagon',
  'set1_pcroom_gaming_chord.wav': 'triangle',
  'set1_pcroom_gaming_drum.wav':  'square',
  'set1_pcroom_gaming_fx.wav':    'diamond',
  'set1_pcroom_gaming_lead.wav':  'star',
  'set1_pcroom_gaming_sub.wav':   'circle',
};

// ÏïàÏ†ïÏ†ÅÏù∏ hue/shape ÏÉùÏÑ± (musicType Í∏∞Ï§Ä)
function stableHash(s) {
  let h = 2166136261>>>0;
  for (let i = 0; i < s.length; i++) {
    h ^= s.charCodeAt(i);
    h += (h<<1) + (h<<4) + (h<<7) + (h<<8) + (h<<24);
  }
  return h>>>0;
}

function pickShapeForMusic(musicType) {
  if (MUSIC_TO_SHAPE[musicType]) return MUSIC_TO_SHAPE[musicType];
  const shapes = ['star','diamond','triangle','square','circle','pentagon'];
  const idx = stableHash(musicType) % shapes.length;
  return shapes[idx];
}

function pickHueForMusic(musicType) {
  // 0~360 Î≤îÏúÑÏùò ÏïàÏ†ïÏ†Å hue
  return (stableHash('hue:'+musicType) % 360);
}

// Í≥° ÏãúÏûë Ïãú, ÌôîÎ©¥Ïóê Ï∞çÏùÑ ÌîΩÏÖÄ ÎèÑÌòï ÏÉòÌîåÎì§ÏùÑ ÏÉùÏÑ±(Ï†ïÏ†Å, ÎûúÎç§ ÏúÑÏπò)
function addSongShapes(avatar, count = 48) {
  // Ïù¥ÎØ∏ Í∞ôÏùÄ ÏÜåÏú†Ïûê(ownerId) ÎèÑÌòïÏù¥ ÏûàÏúºÎ©¥ Ï§ëÎ≥µ Î∞©ÏßÄ
  removeSongShapes(avatar);

  const shape = pickShapeForMusic(avatar.musicType);
  const hue   = pickHueForMusic(avatar.musicType);

  // 3Í∞ú Ïä§ÌÅ¨Î¶∞ ÏòÅÏó≠(ÌîΩÏÖÄ Î≤ÑÌçº Ï¢åÌëúÍ≥Ñ) ÏïàÏóêÏÑú Í∑†Îì± Î∂ÑÎ∞∞
  for (let k = 0; k < count; k++) {
    const screenIdx = k % 3;
    const x = Math.random() * mediaArt.w;
    const y = Math.random() * mediaArt.h;
    const baseSize = 1 + Math.random() * 2; // ÌîΩÏÖÄ ÎäêÎÇå Ïú†ÏßÄÏö© ÏÜåÌòï

    mediaArt.activeShapes[screenIdx].push({
      ownerId: avatar.id,
      musicType: avatar.musicType,
      shape, hue, x, y, baseSize
    });
  }
}

// Í≥° Ï†ïÏßÄ/Î¶¨ÏÖã Ïãú Ìï¥Îãπ Í≥°Ïùò ÎèÑÌòï Ï†úÍ±∞
function removeSongShapes(avatarOrId) {
  const ownerId = typeof avatarOrId === 'string' ? avatarOrId : avatarOrId.id;
  for (let i = 0; i < 3; i++) {
    mediaArt.activeShapes[i] = mediaArt.activeShapes[i].filter(s => s.ownerId !== ownerId);
  }
}

function renderMediaArtScreens() {
  if (!mediaArt.enabled) return;

  // üîä ‚ÄúPCÎ£∏Îßå‚ÄùÏù¥ ÏïÑÎãàÎùº, ÏïÑÎ¨¥ ÏùåÏõêÏù¥ÎÇò Ïû¨ÏÉù Ï§ëÏù∏ÏßÄÎ°ú ÌåêÎã®
  const playingAny =
    playingAvatars.size > 0 ||
    Object.values(musicSamples).some(s => s && s.isPlaying && s.isPlaying());

  // Ï†ÑÏ≤¥ ÎßàÏä§ÌÑ∞ Ï∂úÎ†• Í∏∞Î∞ò Ïò§ÎîîÏò§ Î∂ÑÏÑù
  const spectrum = mediaArt.fft.analyze();
  const bass = mediaArt.fft.getEnergy(20, 120) / 255;
  const mid  = mediaArt.fft.getEnergy(250, 2000) / 255;
  const high = mediaArt.fft.getEnergy(4000, 12000) / 255;
  const overallE = (bass * 0.4 + mid * 0.4 + high * 0.2);

  mediaArt.t += 0.01;

  // 3Î∂ÑÌï† Ïä§ÌÅ¨Î¶∞Ïùò Ïã§Ï†ú ÌëúÏãú ÏòÅÏó≠(ÏóÖÏä§ÏºÄÏùº Î™©Ï†Å)
  const screenRects = [
    { x: 0,               y: 0, w: 2560/3, h: 480 },
    { x: 2560/3,          y: 0, w: 2560/3, h: 480 },
    { x: 2*(2560/3),      y: 0, w: 2560/3, h: 480 }
  ];

  for (let i = 0; i < 3; i++) {
    const g = mediaArt.buffers[i];

    // ÏùÄÏùÄÌïú Î∞∞Í≤Ω(Ïû¨ÏÉù Ïãú ÏÇ¥Ïßù Î∞ùÏïÑÏßê) ‚Äî ÏÑ∏Ìä∏ Ï†úÌïú ÏóÜÏù¥ ÎèôÏûë
    const baseB = playingAny ? 10 + overallE * 20 : 6;
    g.background(0, 0, baseB, 100);

    // Ï§ëÏïô Í∏ÄÎ°úÏö∞(Í≥µÌÜµ Ïû•Ïãù) Ï†úÍ±∞ ÏÉÅÌÉú Ïú†ÏßÄ

    // üé® Í≥°Î≥Ñ ÎèÑÌòï Î†åÎçîÎßÅ: activeShapesÍ∞Ä ÏûàÏúºÎ©¥ Ïû¨ÏÉù ÌîåÎûòÍ∑∏ÏôÄ Î¨¥Í¥ÄÌïòÍ≤å Í∑∏Î¶º
    if (mediaArt.activeShapes[i].length) {
      const alpha = 50 + overallE * 50;  // ÏùåÏïÖ ÏóêÎÑàÏßÄÏóê Îî∞Î•∏ Î∞ùÍ∏∞
      const pulse = 1 + overallE * 0.6;  // ÌÅ¨Í∏∞ ÌéÑÏä§

      for (const s of mediaArt.activeShapes[i]) {
        g.push();
        g.translate(s.x, s.y);

        // ÎÑ§Ïò® ÎäêÎÇå Ïù¥Ï§ë Ï∞çÍ∏∞
        g.fill(s.hue, 85, 85, alpha);
        drawPixelShape(g, s.shape, s.baseSize * pulse);
        g.translate(0.5, 0.5);
        g.fill(s.hue, 90, 100, alpha * 0.6);
        drawPixelShape(g, s.shape, s.baseSize * pulse);

        g.pop();
      }
    }

    // Î≤ÑÌçº ÏóÖÏä§ÏºÄÏùº ÌëúÏãú (ÌîΩÏÖÄÍ∞ê Ïú†ÏßÄ)
    const dst = screenRects[i];
    push();
    translate(dst.x, dst.y);
    image(g, 0, 0, dst.w, dst.h);
    pop();
  }
}

function drawPixelShape(g, shape, sz) {
  switch (shape) {
    case 'star':      return drawPixelStar(g, 5, sz, sz * 0.5);
    case 'diamond':   return drawPixelDiamond(g, sz);
    case 'triangle':  return drawPixelTriangle(g, sz);
    case 'square':    return g.rect(0, 0, sz, sz);
    case 'circle':    return drawPixelCircle(g, sz);
    case 'pentagon':  return drawPixelPolygon(g, 5, sz);
    default:          return g.rect(0, 0, sz, sz * 0.6); // fallback
  }
}

// Î≥Ñ(Ïä§ÌååÏù¥ÌÅ¨Ìòï) ‚Äì Ï§ëÏã¨ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú ÏûëÏùÄ ÏÇ¨Í∞ÅÌòïÏùÑ ÎëòÎü¨Ï∞çÍ∏∞
function drawPixelStar(g, spikes, r1, r2) {
  for (let a = 0; a < TWO_PI; a += TWO_PI / (spikes * 2)) {
    const useR = (Math.floor(a / (TWO_PI / spikes)) % 2 === 0) ? r1 : r2;
    const x = cos(a) * useR;
    const y = sin(a) * useR;
    g.rect(x, y, 1.5, 1.5);
  }
}

function drawPixelDiamond(g, r) {
  // ÎßàÎ¶ÑÎ™®: Ïã≠Ïûê ÌòïÌÉúÎ°ú ÏûëÏùÄ rect Î∞∞Ïπò
  for (let t = -r; t <= r; t += 2) {
    const x = t;
    const y = 0;
    g.rect(x, y, 1.5, 1.5);
  }
  for (let t = -r; t <= r; t += 2) {
    const x = 0;
    const y = t;
    g.rect(x, y, 1.5, 1.5);
  }
}

function drawPixelTriangle(g, r) {
  // Ï†ïÏÇºÍ∞ÅÌòï Ï£ºÎ≥ÄÏùÑ Ï†êÏ∞çÎìØ
  const n = 24;
  for (let i = 0; i < n; i++) {
    const a = (i / n) * TWO_PI;
    const x = cos(a) * r;
    const y = sin(a) * r;
    // ÏúÑÏ™Ω Î∞òÎßå ÏÇ¨Ïö©Ìï¥ ÏÇºÍ∞Å ÎäêÎÇå
    if (y < r * 0.2) g.rect(x, y, 1.5, 1.5);
  }
}

function drawPixelCircle(g, r) {
  const n = 36;
  for (let i = 0; i < n; i++) {
    const a = (i / n) * TWO_PI;
    const x = cos(a) * r;
    const y = sin(a) * r;
    g.rect(x, y, 1.5, 1.5);
  }
}

function drawPixelPolygon(g, sides, r) {
  const n = sides * 2;
  for (let i = 0; i < n; i++) {
    const a = (i / n) * TWO_PI;
    const x = cos(a) * r;
    const y = sin(a) * r;
    g.rect(x, y, 1.5, 1.5);
  }
}
// ÎßàÏö∞Ïä§ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
=======
// ÎßàÏö∞Ïä§ Ïù¥Î≤§Ìä∏
>>>>>>> Stashed changes
function mousePressed() {
  console.log('üñ±Ô∏è mousePressed Ìò∏Ï∂úÎê®', mouseX, mouseY);

  if (showPopup) {
    console.log('üö´ ÌåùÏóÖÏù¥ Ïó¥Î†§ÏûàÏñ¥ÏÑú ÌÅ¥Î¶≠ Î¨¥Ïãú');
    return;
  }

  const elementUnderMouse = document.elementFromPoint(mouseX, mouseY);
  console.log('üéØ ÌÅ¥Î¶≠Ìïú ÏöîÏÜå:', elementUnderMouse?.tagName, elementUnderMouse?.id);

  // Ï∫îÎ≤ÑÏä§Í∞Ä ÏïÑÎãå UI ÏöîÏÜå ÌÅ¥Î¶≠ Ïãú: Ìå®Îãù Î∞©ÏßÄ & Î≤ÑÌäº ÏßÅÏ†ë Ï≤òÎ¶¨
  if (elementUnderMouse && elementUnderMouse.tagName !== 'CANVAS') {
    console.log('üö´ UI ÏöîÏÜå ÌÅ¥Î¶≠ Í∞êÏßÄ, Ìå®Îãù Î∞©ÏßÄ:', elementUnderMouse.tagName);

    // Î¶¨ÏÖã Î≤ÑÌäº
    if (elementUnderMouse.id === 'resetStageBtn' && !elementUnderMouse.disabled) {
      console.log('üéØ Î¶¨ÏÖã Î≤ÑÌäº ÏßÅÏ†ë Ïã§Ìñâ');
      resetStage();
    }

    // Ï†ïÎ†¨ Î≤ÑÌäº
    if (elementUnderMouse.id === 'sortAvatarsBtn' && !elementUnderMouse.disabled && !isSorting) {
      console.log('üéØ Ï†ïÎ†¨ Î≤ÑÌäº ÏßÅÏ†ë Ïã§Ìñâ (mousePressed)');
      try { sortAvatars(); } catch (e) { console.error('‚ùå sortAvatars Ïò§Î•ò:', e); }
    }
    return;
  }

  console.log('‚úÖ Ï∫îÎ≤ÑÏä§ ÌÅ¥Î¶≠ÏúºÎ°ú ÌåêÏ†ï, Í≥ÑÏÜç ÏßÑÌñâ');

  // Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏ ÌôúÏÑ±Ìôî
  if (getAudioContext().state === 'suspended') {
    getAudioContext().resume();
    console.log('üîä Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏ ÌôúÏÑ±ÌôîÎê®');
  }

  const worldMouseX = mouseX + cameraX;
  const worldMouseY = mouseY + cameraY;

  // Î¨¥ÎåÄ ÏïÑÎ∞îÌÉÄ ÌÅ¥Î¶≠
  for (let avatar of stageAvatars) {
    if (avatar.state === 'idle') {
      let distance = dist(worldMouseX, worldMouseY, avatar.x, avatar.y);
      if (distance <= 32) {
        console.log('üéØ Î¨¥ÎåÄ ÏïÑÎ∞îÌÉÄ ÏÑ†ÌÉù:', avatar.nickname);
        selectedAvatar = avatar;
        isDragging = false;
        dragOffset.x = worldMouseX - avatar.x;
        dragOffset.y = worldMouseY - avatar.y;

        avatar.currentAction = 'stopped';
        avatar.vx = 0; avatar.vy = 0;
        avatar.isClicked = true;
        avatar.clickTimer = 0;
        avatar.isDragged = false;
        avatar.baseY = avatar.y;
        return;
      }
    }
  }

  // Firebase ÏïÑÎ∞îÌÉÄ ÌÅ¥Î¶≠
  for (let avatar of avatars) {
    if (avatar.state === 'idle') {
      let distance = dist(worldMouseX, worldMouseY, avatar.x, avatar.y);
      if (distance <= 32) {
        console.log('üéØ Firebase ÏïÑÎ∞îÌÉÄ ÏÑ†ÌÉù:', avatar.nickname);
        selectedAvatar = avatar;
        isDragging = false;
        dragOffset.x = worldMouseX - avatar.x;
        dragOffset.y = worldMouseY - avatar.y;

        avatar.currentAction = 'stopped';
        avatar.vx = 0; avatar.vy = 0;
        avatar.isClicked = true;
        avatar.clickTimer = 0;
        avatar.isDragged = false;
        avatar.baseY = avatar.y;
        return;
      }
    }
  }

  // Ìå®Îãù ÏãúÏûë
  console.log('üñêÔ∏è Ìå®Îãù ÏãúÏûë - ÏïÑÎ∞îÌÉÄ Ïàò:', stageAvatars.length, '/', avatars.length);
  isPanning = true;
  panStart.x = mouseX;
  panStart.y = mouseY;
}

function mouseDragged() {
  if (isPanning) {
    const deltaX = mouseX - panStart.x;
    const deltaY = mouseY - panStart.y;
    cameraX -= deltaX;
    cameraY -= deltaY;

    const canvasWidth = 2560;
    const canvasHeight = 1760;
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;

    const maxCameraX = Math.max(0, canvasWidth - viewportWidth);
    const maxCameraY = Math.max(0, canvasHeight - viewportHeight);

    cameraX = constrain(cameraX, 0, maxCameraX);
    cameraY = constrain(cameraY, 0, maxCameraY);

    panStart.x = mouseX;
    panStart.y = mouseY;
  } else if (selectedAvatar && selectedAvatar.state === 'idle') {
    const worldMouseX = mouseX + cameraX;
    const worldMouseY = mouseY + cameraY;

    isDragging = true;
    selectedAvatar.isDragged = true;
    selectedAvatar.x = worldMouseX - dragOffset.x;
    selectedAvatar.y = worldMouseY - dragOffset.y;

    selectedAvatar.x = constrain(selectedAvatar.x, 0, 2560);

    if (selectedAvatar.isSpecial) {
      selectedAvatar.y = constrain(selectedAvatar.y, 450, 1760);
    } else {
      selectedAvatar.y = constrain(selectedAvatar.y, 480, 1760);
    }

    if (!selectedAvatar.isSpecial) {
      const stageLeft = 853, stageRight = 1707, stageTop = 480, stageBottom = 800;
      if (selectedAvatar.y >= stageTop && selectedAvatar.y <= stageBottom &&
          selectedAvatar.x >= stageLeft && selectedAvatar.x <= stageRight) {
        const centerX = (stageLeft + stageRight) / 2;
        selectedAvatar.x = (selectedAvatar.x < centerX) ? (stageLeft - 32) : (stageRight + 32);
      }
    }
  }
}

function mouseReleased() {
  if (isPanning) {
    console.log('üñêÔ∏è Ìå®Îãù Ï¢ÖÎ£å');
    isPanning = false;
  } else if (selectedAvatar) {
    if (!isDragging) {
      selectedAvatar.isClicked = false;
      selectedAvatar.isDragged = false;
      showPopupFor(selectedAvatar);
    } else {
      selectedAvatar.isClicked = false;
      selectedAvatar.isDragged = false;

      if (selectedAvatar.isSpecial && isInStageArea(selectedAvatar.x, selectedAvatar.y)) {
        const musicSetCompatibility = checkMusicSetCompatibility(selectedAvatar);
        if (!musicSetCompatibility.compatible) {
          console.log(`üö´ ÏùåÏïÖ ÏÑ∏Ìä∏ Ï∂©Îèå: ${selectedAvatar.nickname}(${selectedAvatar.musicSet}) vs ${musicSetCompatibility.currentSet}`);
          showMusicSetWarning(selectedAvatar, musicSetCompatibility.currentSet);

          selectedAvatar.y = 850;
          selectedAvatar.currentAction = 'idle';
          selectedAvatar.idleTimer = random(30, 120);

          selectedAvatar = null;
          isDragging = false;
          return;
        }

        const nearestSlot = findNearestEmptyStageSlot(selectedAvatar.x, selectedAvatar.y);
        if (nearestSlot !== -1) {
          if (selectedAvatar.isOnStage && selectedAvatar.stageSlot !== -1) {
            stageSlots[selectedAvatar.stageSlot] = null;
          }

          const slotPos = getStageSlotPosition(nearestSlot);
          selectedAvatar.x = slotPos.x;
          selectedAvatar.y = slotPos.y;
          selectedAvatar.isOnStage = true;
          selectedAvatar.stageSlot = nearestSlot;
          stageSlots[nearestSlot] = selectedAvatar.id;
          selectedAvatar.currentAction = 'stopped';

          console.log(`‚úÖ ${selectedAvatar.nickname} Î¨¥ÎåÄ Î∞∞Ïπò ÏÑ±Í≥µ (ÏÑ∏Ìä∏: ${selectedAvatar.musicSet})`);
          playAvatarMusic(selectedAvatar);
        } else {
          console.log('‚ö†Ô∏è Î¨¥ÎåÄ Ïä¨Î°ØÏù¥ Î™®Îëê Ï∞®ÏûàÏäµÎãàÎã§!');
          selectedAvatar.y = 850;
          selectedAvatar.isOnStage = false;
          if (selectedAvatar.stageSlot !== -1) {
            stageSlots[selectedAvatar.stageSlot] = null;
            selectedAvatar.stageSlot = -1;
          }
          selectedAvatar.currentAction = 'idle';
          selectedAvatar.idleTimer = random(30, 120);
        }
      } else {
        if (selectedAvatar.isOnStage && selectedAvatar.stageSlot !== -1) {
          stopAvatarMusic(selectedAvatar);
          stageSlots[selectedAvatar.stageSlot] = null;
          selectedAvatar.isOnStage = false;
          selectedAvatar.stageSlot = -1;
        }

        selectedAvatar.dropBounce = -6;
        selectedAvatar.dropBounceVel = -1.5;
        selectedAvatar.baseY = selectedAvatar.y;
        selectedAvatar.currentAction = 'idle';
        selectedAvatar.idleTimer = random(30, 120);
      }
    }
  }

  selectedAvatar = null;
  isDragging = false;
}

function mouseWheel(event) {
  event.preventDefault();
  const wheelSensitivity = 1;
  const deltaY = event.delta * wheelSensitivity;

  cameraY += deltaY;

  const canvasWidth = 2560;
  const canvasHeight = 1760;
  const viewportWidth = window.innerWidth;
  const viewportHeight = window.innerHeight;

  const maxCameraX = Math.max(0, canvasWidth - viewportWidth);
  const maxCameraY = Math.max(0, canvasHeight - viewportHeight);

  cameraX = constrain(cameraX, 0, maxCameraX);
  cameraY = constrain(cameraY, 0, maxCameraY);

  return false;
}

// ÌåùÏóÖ ÏïÑÎ∞îÌÉÄ Ï∫îÎ≤ÑÏä§ Î†åÎçî
function drawPopupAvatar(canvas, avatarData) {
  const ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  const centerX = canvas.width / 2;
  const centerY = canvas.height / 2;
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
  const scale = 0.6;

  // Wing (Îí§)
=======
>>>>>>> Stashed changes
  const scale = 1.0; // ÌåùÏóÖÏö© Ïä§ÏºÄÏùº (Îçî ÌÅ¨Í≤å)
  
  // Wing (Îí§Ïóê Í∑∏Î¶¨Í∏∞)
>>>>>>> fc9b42c0aec4b7ab0a037f3b4f6815143baede90
  if (avatarData.wingOn && avatarAssets.wing && avatarAssets.wing.width > 0) {
    const wingOffsetX = avatarData.gender === 'female' ? -6 : -4;
    const wingOffsetY = avatarData.gender === 'female' ? -10 : -8;
    const wingSize = 190 * scale;
    ctx.drawImage(avatarAssets.wing.canvas,
      centerX + wingOffsetX - wingSize/2,
      centerY + wingOffsetY - wingSize/2,
      wingSize, wingSize);
  }

  // Body
  const bodyImages = avatarData.gender === 'female' ? avatarAssets.female : avatarAssets.male;
  if (bodyImages && bodyImages[avatarData.bodyIdx] && bodyImages[avatarData.bodyIdx].width > 0) {
    const bodySize = 176 * scale;
    ctx.drawImage(bodyImages[avatarData.bodyIdx].canvas,
      centerX - bodySize/2,
      centerY - bodySize/2,
      bodySize, bodySize);
  }

  // Head (Ïïû)
  if (avatarData.headIdx !== null && avatarData.headIdx !== undefined &&
      avatarAssets.heads[avatarData.headIdx] && avatarAssets.heads[avatarData.headIdx].width > 0) {
    const headOffsetY = avatarData.gender === 'female' ? -10 : -10; // Î™®ÏûêÍ∞Ä ÏûòÎ¶¨ÏßÄ ÏïäÎèÑÎ°ù ÏúÑÏπò Ï°∞Ï†ï
    const headSize = 176 * scale;
    ctx.drawImage(avatarAssets.heads[avatarData.headIdx].canvas,
      centerX - headSize/2,
      centerY + headOffsetY - headSize/2,
      headSize, headSize);
  }
}

function showPopupFor(avatar) {
  popupAvatar = avatar;
  showPopup = true;

  // ÌåùÏóÖ ÏïÑÎ∞îÌÉÄ Ïù¥ÎØ∏ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
  const popupCanvas = document.getElementById('popupAvatarCanvas');
  if (popupCanvas) {
    if (avatar.customData && typeof avatar.customData === 'object') {
      drawPopupAvatar(popupCanvas, avatar.customData);
    } else {
      const ctx = popupCanvas.getContext('2d');
      ctx.clearRect(0, 0, popupCanvas.width, popupCanvas.height);
      const img = new Image();
      img.onload = function() {
        const size = Math.min(popupCanvas.width, popupCanvas.height) * 0.8;
        const x = (popupCanvas.width - size) / 2;
        const y = (popupCanvas.height - size) / 2;
        ctx.drawImage(img, x, y, size, size);
      };
      img.src = 'avatar_sample.jpeg';
    }
=======
>>>>>>> Stashed changes
  const popupImage = document.getElementById('popupAvatarImage');
  if (avatar.customData && typeof avatar.customData === 'object') {
    // Ïª§Ïä§ÌÑ∞ÎßàÏù¥ÏßïÎêú ÏïÑÎ∞îÌÉÄÎ•º ÏûÑÏãú Ï∫îÎ≤ÑÏä§Ïóê Í∑∏Î¶∞ ÌõÑ Ïù¥ÎØ∏ÏßÄÎ°ú Î≥ÄÌôò
    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = 200;  // Ï∫îÎ≤ÑÏä§ ÌÅ¨Í∏∞ Ï¶ùÍ∞Ä
    tempCanvas.height = 200; // Ï∫îÎ≤ÑÏä§ ÌÅ¨Í∏∞ Ï¶ùÍ∞Ä
    drawPopupAvatar(tempCanvas, avatar.customData);
    
    // Ï∫îÎ≤ÑÏä§Î•º Ïù¥ÎØ∏ÏßÄ URLÎ°ú Î≥ÄÌôòÌï¥ÏÑú imgÏóê Ï†ÅÏö©
    popupImage.src = tempCanvas.toDataURL();
  } else {
    // Í∏∞Î≥∏ ÏïÑÎ∞îÌÉÄ Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©
    popupImage.src = 'avatar_sample.jpeg';
<<<<<<< Updated upstream
=======
>>>>>>> fc9b42c0aec4b7ab0a037f3b4f6815143baede90
>>>>>>> Stashed changes
  }

  document.getElementById('popupNickname').textContent = avatar.nickname || 'ÏÇ¨Ïö©Ïûê';

  // ÏùåÏïÖ Ìè¨ÏßÄÏÖò + Î†àÏãúÌîº
  let musicPosition = avatar.musicPosition || '-';
  let recipeText = '-';
  if (avatar.selectedRecipe && avatar.selectedRecipe.name) {
    recipeText = avatar.selectedRecipe.name;
  }
  document.getElementById('popupMusicPosition').textContent = musicPosition;
  document.getElementById('popupSelectedRecipe').textContent = recipeText;

  // Ï∂îÏñµ ÌÖçÏä§Ìä∏
  document.getElementById('popupMemory').textContent = avatar.memory || 'ÏÜåÏ§ëÌïú Ï∂îÏñµÏùÑ Í∞ÑÏßÅÌïòÍ≥† ÏûàÏäµÎãàÎã§.';

  // ÌÇ§ÏõåÎìú
  const keywordsContainer = document.getElementById('popupKeywords');
  if (keywordsContainer) {
    keywordsContainer.innerHTML = '';
    let keywords = [];
    if (avatar.extractedKeywords && Array.isArray(avatar.extractedKeywords)) {
      keywords = avatar.extractedKeywords.slice(0, 5);
    } else if (avatar.keywords) {
      if (Array.isArray(avatar.keywords)) keywords = avatar.keywords.slice(0, 5);
      else if (typeof avatar.keywords === 'string') {
        keywords = avatar.keywords.split(/[,\s]+/).filter(k => k.trim().length > 0).slice(0, 5);
      }
    }
    keywords.forEach(keyword => {
      const keywordTag = document.createElement('span');
      keywordTag.className = 'keyword-tag';
      keywordTag.textContent = '#' + keyword.trim();
      keywordsContainer.appendChild(keywordTag);
    });
  }

  document.getElementById('popupOverlay').style.display = 'block';

  if (!avatar.isStageAvatar) {
    avatar.currentAction = 'stopped';
  }
}

function closePopup() {
  showPopup = false;
  const overlay = document.getElementById('popupOverlay');
  if (overlay) overlay.style.display = 'none';

  if (popupAvatar) {
    if (!popupAvatar.isStageAvatar) {
      popupAvatar.currentAction = 'idle';
      popupAvatar.idleTimer = random(30, 120);
    }
    popupAvatar = null;
  }
}

// Î¨¥ÎåÄ Î¶¨ÏÖã
function resetStage() {
  console.log('üé≠ === Î¨¥ÎåÄ Î¶¨ÏÖã ÏãúÏûë ===');

  try {
    const resetBtn = document.getElementById('resetStageBtn');
    if (resetBtn) {
      resetBtn.disabled = true;
      resetBtn.textContent = 'üé≠ Î¶¨ÏÖã Ï§ë...';
    }

    playingAvatars.clear();
    pendingAvatars.clear();

    let tonePlayerCount = 0;
    Object.values(tonePlayers).forEach(player => {
      if (player && player.state === 'started') {
        player.stop(); tonePlayerCount++;
      }
    });

    let p5SoundCount = 0;
    Object.values(musicSamples).forEach(sound => {
      if (sound && sound.isPlaying()) {
        sound.stop(); p5SoundCount++;
      }
    });

    masterClock.isRunning = false;
    masterClock.startTime = 0;
    masterClock.currentBeat = 0;
    masterClock.currentMeasure = 0;

    let removedCount = 0;
    stageAvatars.forEach(avatar => {
      if (avatar.isOnStage) {
        avatar.isOnStage = false;
        avatar.stageSlot = -1;
        avatar.y = 850;
        avatar.currentAction = 'idle';
        avatar.idleTimer = random(30, 120);
        removedCount++;
      }
    });
    avatars.forEach(avatar => {
      if (avatar.isOnStage) {
        avatar.isOnStage = false;
        avatar.stageSlot = -1;
        avatar.y = 1200;
        avatar.currentAction = 'idle';
        avatar.idleTimer = random(30, 120);
        removedCount++;
      }
    });

    for (let i = 0; i < stageSlots.length; i++) stageSlots[i] = null;

    console.log(`‚úÖ Î¨¥ÎåÄ Î¶¨ÏÖã ÏôÑÎ£å! ${removedCount}Í∞ú ÏïÑÎ∞îÌÉÄ Ï†úÍ±∞Îê®`);

    setTimeout(() => { updateResetButton(); }, 100);
  } catch (error) {
    console.error('‚ùå resetStage Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error);
    const resetBtn = document.getElementById('resetStageBtn');
    if (resetBtn) {
      resetBtn.disabled = false;
      resetBtn.textContent = 'üé≠ Î¨¥ÎåÄ Î¶¨ÏÖã (Ïò§Î•ò)';
    }
  }
<<<<<<< Updated upstream
  // Î™®Îì† ÎèÑÌòï ÎπÑÏö∞Í∏∞
mediaArt.activeShapes = [[], [], []]; // ‚úÖ

=======
>>>>>>> Stashed changes
  console.log('üé≠ === Î¨¥ÎåÄ Î¶¨ÏÖã Ï¢ÖÎ£å ===');
}

// ÏïÑÎ∞îÌÉÄ Ï†ïÎ†¨
function sortAvatars() {
  console.log('üìê === ÏïÑÎ∞îÌÉÄ Ï†ïÎ†¨ ÏãúÏûë ===');

  try {
    if (typeof isInStageArea !== 'function') {
      throw new Error('‚ùå isInStageArea Ìï®ÏàòÍ∞Ä Ï†ïÏùòÎêòÏßÄ ÏïäÏùå (Î∞∞Ìè¨ ÌôòÍ≤Ω Ïò§Î•ò)');
    }

    const sortBtn = document.getElementById('sortAvatarsBtn');
    if (sortBtn) { sortBtn.disabled = true; sortBtn.textContent = 'üìê Ï†ïÎ†¨ Ï§ë...'; }

    isSorting = true;
    sortingAnimations = [];

    let allStageAvatars = [...stageAvatars];
    let allRegularAvatars = [...avatars];
    let allAvatars = [...allStageAvatars, ...allRegularAvatars];

    // Ï†ïÎ†¨ ÎåÄÏÉÅ: Î¨¥ÎåÄÏóê ÏóÜÍ≥† idleÏù∏ ÏïÑÎ∞îÌÉÄÎßå
    let sortableAvatars = allAvatars.filter(avatar => {
      const isIdle = avatar.state === 'idle';
      const inStageArea = isInStageArea(avatar.x, avatar.y);
      const isDefinitelyOnStage = avatar.isOnStage || inStageArea || (avatar.stageSlot !== undefined && avatar.stageSlot !== -1);
      const notSorting = avatar.currentAction !== 'sorting';
      return isIdle && !isDefinitelyOnStage && notSorting;
    });

    if (sortableAvatars.length === 0) {
      finishSorting();
      return;
    }

    const freeAreaStartY = 900;
    const freeAreaEndY = 1600;
    const freeAreaStartX = 200;
    const freeAreaEndX = 2360;

    const freeAreaCenterX = (freeAreaStartX + freeAreaEndX) / 2;
    const freeAreaCenterY = (freeAreaStartY + freeAreaEndY) / 2;

    if (sortableAvatars.length === 1) {
      const animation = {
        avatar: sortableAvatars[0],
        startX: sortableAvatars[0].x,
        startY: sortableAvatars[0].y,
        targetX: freeAreaCenterX,
        targetY: freeAreaCenterY,
        progress: 0,
        duration: 1.0,
        easing: 'easeOutCubic'
      };
      sortingAnimations.push(animation);
      sortableAvatars[0].currentAction = 'sorting';
      sortableAvatars[0].vx = 0; sortableAvatars[0].vy = 0;
    } else {
      const avatarSpacing = 80;
      const minRadius = (sortableAvatars.length * avatarSpacing) / (2 * Math.PI);
      const freeAreaWidth = freeAreaEndX - freeAreaStartX;
      const freeAreaHeight = freeAreaEndY - freeAreaStartY;
      const maxRadius = Math.min(freeAreaWidth / 2.5, freeAreaHeight / 2.5, 300);
      const radius = Math.max(minRadius, 80);
      let finalRadius = Math.min(radius, maxRadius);
      let rings = 1;

      if (radius > maxRadius) {
        const avatarsPerRing = Math.floor((2 * Math.PI * maxRadius) / avatarSpacing);
        rings = Math.ceil(sortableAvatars.length / avatarsPerRing);
        finalRadius = maxRadius;
      }

      let avatarIndex = 0;
      for (let ring = 0; ring < rings; ring++) {
        const ringRadius = finalRadius - (ring * 60);
        const avatarsInThisRing = ring === 0
          ? Math.min(sortableAvatars.length, Math.floor((2 * Math.PI * ringRadius) / avatarSpacing))
          : Math.min(sortableAvatars.length - avatarIndex, Math.floor((2 * Math.PI * ringRadius) / avatarSpacing));

        if (avatarsInThisRing <= 0) break;

        const angleStep = (2 * Math.PI) / avatarsInThisRing;
        const startAngle = ring * 0.5;

        for (let i = 0; i < avatarsInThisRing && avatarIndex < sortableAvatars.length; i++) {
          const angle = startAngle + i * angleStep;
          const targetX = freeAreaCenterX + Math.cos(angle) * ringRadius;
          const targetY = freeAreaCenterY + Math.sin(angle) * ringRadius;

          const avatar = sortableAvatars[avatarIndex];
          const animation = {
            avatar,
            startX: avatar.x,
            startY: avatar.y,
            targetX, targetY,
            progress: 0,
            duration: 1.0 + (ring * 0.1),
            easing: 'easeOutCubic'
          };
          sortingAnimations.push(animation);
          avatar.currentAction = 'sorting';
          avatar.vx = 0; avatar.vy = 0;
          avatarIndex++;
        }
      }
    }
  } catch (error) {
    console.error('‚ùå ÏïÑÎ∞îÌÉÄ Ï†ïÎ†¨ Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
    finishSorting();
  }
  console.log('üìê === ÏïÑÎ∞îÌÉÄ Ï†ïÎ†¨ Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë ===');
}

function updateSortingAnimations() {
  if (!isSorting || sortingAnimations.length === 0) return;
  let allCompleted = true;
  const deltaTime = 1/60;

  sortingAnimations.forEach(animation => {
    if (animation.progress < 1) {
      allCompleted = false;
      animation.progress = Math.min(1, animation.progress + deltaTime / animation.duration);
      const easedProgress = 1 - Math.pow(1 - animation.progress, 3);
      animation.avatar.x = animation.startX + (animation.targetX - animation.startX) * easedProgress;
      animation.avatar.y = animation.startY + (animation.targetY - animation.startY) * easedProgress;
    } else {
      animation.avatar.x = animation.targetX;
      animation.avatar.y = animation.targetY;
    }
  });

  if (allCompleted) finishSorting();
}

function finishSorting() {
  console.log('üìê === ÏïÑÎ∞îÌÉÄ Ï†ïÎ†¨ ÏôÑÎ£å ===');
  try {
    isSorting = false;
    if (sortingAnimations && Array.isArray(sortingAnimations)) {
      sortingAnimations.forEach(animation => {
        if (animation && animation.avatar) {
          animation.avatar.currentAction = 'idle';
          animation.avatar.idleTimer = random(30, 120);
        }
      });
    }
    
    sortingAnimations = [];
    
    // Î≤ÑÌäº Ïû¨ÌôúÏÑ±Ìôî
    const sortBtn = document.getElementById('sortAvatarsBtn');
    if (sortBtn) {
      sortBtn.disabled = false;
      sortBtn.textContent = 'üìê ÏïÑÎ∞îÌÉÄ Ï†ïÎ†¨';
    }
    
    console.log('‚úÖ Ï†ïÎ†¨ ÏôÑÎ£å Ï≤òÎ¶¨ ÏÑ±Í≥µ');
  } catch (error) {
    console.error('‚ùå finishSorting Ïò§Î•ò:', error);
    // ÏµúÏÜåÌïúÏùò ÏÉÅÌÉú Î≥µÏõê
    isSorting = false;
    sortingAnimations = [];
  }
}

// HTML ÌåùÏóÖ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
window.addEventListener('DOMContentLoaded', function() {
  console.log('üîß DOM Î°úÎìú ÏôÑÎ£å, Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù Ï§ë...');
  
  document.getElementById('popupOverlay').addEventListener('click', function(e) {
    if (e.target === this) {
      closePopup();
    }
  });
  
  // Î¶¨ÏÖã Î≤ÑÌäº Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà - Îã®ÏàúÌïòÍ≤å Ï≤òÎ¶¨
  const resetBtn = document.getElementById('resetStageBtn');
  if (resetBtn) {
    console.log('‚úÖ Î¶¨ÏÖã Î≤ÑÌäº Ï∞æÏùå, Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù');
    
    resetBtn.addEventListener('click', function(e) {
      console.log('üéØ Î¶¨ÏÖã Î≤ÑÌäº ÌÅ¥Î¶≠Îê®, disabled:', this.disabled);
      
      if (!this.disabled) {
        console.log('üöÄ resetStage() Ïã§Ìñâ ÏãúÏûë');
        resetStage();
      }
    });
    
  } else {
    console.error('‚ùå Î¶¨ÏÖã Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå!');
  }
  
  // Ï†ïÎ†¨ Î≤ÑÌäº Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
  const sortBtn = document.getElementById('sortAvatarsBtn');
  if (sortBtn) {
    console.log('‚úÖ Ï†ïÎ†¨ Î≤ÑÌäº Ï∞æÏùå, Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù');
    console.log('üîß Ï†ïÎ†¨ Î≤ÑÌäº ÌòÑÏû¨ ÏÉÅÌÉú:', {
      disabled: sortBtn.disabled,
      isSorting: typeof isSorting !== 'undefined' ? isSorting : 'Ï†ïÏùòÎêòÏßÄÏïäÏùå',
      sortAvatarsÌï®Ïàò: typeof sortAvatars !== 'undefined' ? 'Ï†ïÏùòÎê®' : 'Ï†ïÏùòÎêòÏßÄÏïäÏùå'
    });
    
    sortBtn.addEventListener('click', function(e) {
      console.log('üéØ Ï†ïÎ†¨ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Î∞úÏÉù!');
      console.log('   - disabled:', this.disabled);
      console.log('   - isSorting:', isSorting);
      console.log('   - sortAvatars Ìï®Ïàò Ï°¥Ïû¨:', typeof sortAvatars === 'function');
      
      if (!this.disabled && !isSorting) {
        console.log('üöÄ sortAvatars() Ïã§Ìñâ Ï°∞Í±¥ Ï∂©Ï°±, Ïã§Ìñâ ÏãúÏûë');
        try {
          sortAvatars();
        } catch (error) {
          console.error('‚ùå sortAvatars Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error);
        }
      } else {
        console.warn('‚ö†Ô∏è sortAvatars Ïã§Ìñâ Ï°∞Í±¥ Î∂àÏ∂©Ï°±:', {
          disabled: this.disabled,
          isSorting: isSorting
        });
      }
    });
    
  } else {
    console.error('‚ùå Ï†ïÎ†¨ Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå!');
    console.log('üîç ÌòÑÏû¨ DOMÏóêÏÑú Î≤ÑÌäº Í≤ÄÏÉâ Í≤∞Í≥º:', {
      byId: document.getElementById('sortAvatarsBtn'),
      byQuery: document.querySelector('#sortAvatarsBtn'),
      allButtons: document.querySelectorAll('button').length
    });
  }
});

// ÏùåÏïÖ Ïû¨ÏÉù Ìï®Ïàò (ÏùåÏõêÏù¥ ÏóÜÏñ¥ÎèÑ Ïò§Î•ò ÏóÜÏù¥ Ï≤òÎ¶¨)
// TODO: Îã§Ï§ë BPM ÏßÄÏõê Ïãú ÎåÄÌè≠ ÏàòÏ†ï ÌïÑÏöî
// 
// ÌòÑÏû¨ Ï†úÌïúÏÇ¨Ìï≠:
// - Î™®Îì† ÏùåÏïÖÏù¥ ÎèôÏùºÌïú BPM(110)ÏúºÎ°ú Í∞ÄÏ†ïÌïòÍ≥† ÎèôÍ∏∞Ìôî
// - ÏÑúÎ°ú Îã§Î•∏ BPMÏùò ÏùåÏïÖ ÎèôÏãú Ïû¨ÏÉù Ïãú Î∞ïÏûê Î∂àÏùºÏπò Î∞úÏÉù Í∞ÄÎä•
//
// Îã§Ï§ë BPM ÏßÄÏõê Ïãú ÌïÑÏöîÌïú Î°úÏßÅ:
// 1. ÏïÑÎ∞îÌÉÄ ÏùåÏïÖ ÌååÏùºÏóêÏÑú BPM Ï†ïÎ≥¥ Ï∂îÏ∂ú ÎòêÎäî DB Ï°∞Ìöå
// 2. ÎèôÏùºÌïú BPM Í∑∏Î£πÎÅºÎ¶¨Îßå ÎèôÍ∏∞Ìôî
// 3. ÏÑúÎ°ú Îã§Î•∏ BPM Í∑∏Î£πÏùÄ ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Í¥ÄÎ¶¨
// 4. UIÏóêÏÑú BPM Ï∂©Îèå ÏÉÅÌô© ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≤ΩÍ≥† ÌëúÏãú
function playAvatarMusic(avatar) {
  if (!avatar.musicType) {
    console.warn('‚ö†Ô∏è ÏùåÏïÖ ÌÉÄÏûÖÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå:', avatar.nickname, '- ÏùåÏïÖ ÏóÜÏù¥ Î¨¥ÎåÄÏóê Ïò¨ÎùºÍ∞ëÎãàÎã§');
    return; // ÏùåÏïÖ ÏóÜÏù¥ÎèÑ Î¨¥ÎåÄÏóê Ïò¨Î¶¥ Ïàò ÏûàÏùå
  }
  
  const sound = musicSamples[avatar.musicType];
  if (!sound) {
    console.warn('‚ö†Ô∏è ÏùåÏõêÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå:', avatar.musicType, '- ÏùåÏïÖ ÏóÜÏù¥ Î¨¥ÎåÄÏóê Ïò¨ÎùºÍ∞ëÎãàÎã§');
    return; // ÏùåÏïÖ ÏóÜÏù¥ÎèÑ Î¨¥ÎåÄÏóê Ïò¨Î¶¥ Ïàò ÏûàÏùå
  }
  
  // TODO: Ïó¨Í∏∞ÏÑú Ìï¥Îãπ ÏùåÏïÖÏùò BPM Ï†ïÎ≥¥ ÌôïÏù∏ ÌïÑÏöî
  // const musicBpm = musicBpmDatabase[avatar.musicType]?.bpm || 110;
  // const currentMasterBpm = masterClock.bpm;
  // 
  // if (musicBpm !== currentMasterBpm && playingAvatars.size > 0) {
  //   console.warn(`‚ö†Ô∏è BPM Î∂àÏùºÏπò: ${avatar.musicType}(${musicBpm}) vs ÌòÑÏû¨(${currentMasterBpm})`);
  //   // ÏÇ¨Ïö©ÏûêÏóêÍ≤å BPM Ï∂©Îèå Í≤ΩÍ≥† ÌëúÏãúÌïòÍ±∞ÎÇò Î≥ÑÎèÑ Í∑∏Î£πÏúºÎ°ú Ï≤òÎ¶¨
  // }
  
  if (playingAvatars.size === 0) {
    // Ï†ïÎßê ÏïÑÎ¨¥Í≤ÉÎèÑ Ïû¨ÏÉù Ï§ëÏù¥ ÏïÑÎãê ÎïåÎßå Ï¶âÏãú ÏãúÏûë
    console.log(`üéØ ${avatar.nickname} - Ï≤´ Î≤àÏß∏ ÏïÑÎ∞îÌÉÄ, Ï¶âÏãú ÏãúÏûë`);
    // TODO: Ìï¥Îãπ ÏùåÏïÖÏùò BPMÏúºÎ°ú ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ ÏÑ§Ï†ï
    // masterClock.bpm = musicBpm;
    startMasterClockFromPosition(0);
    startAvatarMusicFromPosition(avatar, sound, 0);
  } else {
    // ÌòÑÏû¨ Ïû¨ÏÉù Ï§ëÏù∏ ÏïÑÎ∞îÌÉÄÎì§Í≥º ÎèôÍ∏∞Ìôî - Í∞ÑÎã®Ìïú Î∞©Î≤ï ÏÇ¨Ïö©
    console.log(`‚è∞ ${avatar.nickname} - Í∏∞Ï°¥ ÏïÑÎ∞îÌÉÄÎì§Í≥º ÎèôÍ∏∞Ìôî`);
    const currentPosition = getCurrentPlaybackPosition();
    
    // 1.5Ï¥à ÌõÑÏóê ÌòÑÏû¨ Ïû¨ÏÉù ÏúÑÏπòÏóêÏÑú ÏãúÏûëÌïòÎèÑÎ°ù Ïä§ÏºÄÏ§ÑÎßÅ
    const currentTime = millis() / 1000.0;
    const waitTime = 1.5; // Í≥†Ï†ïÎêú ÎåÄÍ∏∞ ÏãúÍ∞Ñ
    const futurePosition = currentPosition + waitTime;
    
    avatar.isPending = true;
    avatar.pendingStartTime = currentTime + waitTime;
    avatar.playbackStartPosition = futurePosition;
    
    pendingAvatars.set(avatar.id, { avatar, sound });
    
    console.log(`‚è∞ ${avatar.nickname}: ${waitTime}Ï¥à ÌõÑ ${futurePosition.toFixed(2)}Ï¥à ÏúÑÏπòÏóêÏÑú Ïû¨ÏÉù`);
  }
}

// ÌòÑÏû¨ ÏúÑÏπò Í∏∞Î∞òÏúºÎ°ú ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ ÏãúÏûë
function startMasterClockFromPosition(startPosition) {
  masterClock.isRunning = true;
  masterClock.startTime = (millis() / 1000.0) - startPosition; // ÏãúÏûë ÏãúÍ∞ÑÏùÑ Ïó≠ÏÇ∞
  masterClock.currentBeat = 0;
  masterClock.currentMeasure = 0;
  updateNextMeasureStart();
  console.log(`üéØ ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ ÏãúÏûë (${startPosition.toFixed(2)}Ï¥à ÏúÑÏπòÎ∂ÄÌÑ∞)`);
}

// ÌòÑÏû¨ Ïû¨ÏÉù ÏúÑÏπòÏóê ÎßûÏ∂∞ Îã§Ïùå ÎßàÎîîÏóê ÎèôÍ∏∞Ìôî
function scheduleAvatarForCurrentPosition(avatar, sound, currentPosition) {
  // ÌòÑÏû¨ ÏúÑÏπòÏóêÏÑú Îã§Ïùå ÎßàÎîî Í≥ÑÏÇ∞
  const beatsPerSecond = masterClock.bpm / 60.0; // 110 BPM ‚âà 1.83 beats/second
  const secondsPerMeasure = masterClock.beatsPerMeasure / beatsPerSecond; // 4 beats / 1.83 ‚âà 2.18 seconds per measure
  
  // ÌòÑÏû¨ ÏúÑÏπòÍ∞Ä Î™á Î≤àÏß∏ ÎßàÎîîÏùò Î™á Î≤àÏß∏ Î∞ïÏûêÏù∏ÏßÄ Í≥ÑÏÇ∞
  const currentMeasure = Math.floor(currentPosition / secondsPerMeasure);
  const nextMeasureStart = (currentMeasure + 1) * secondsPerMeasure;
  
  // Îã§Ïùå ÎßàÎîîÍπåÏßÄ Ïã§Ï†ú Í∏∞Îã§Î¶¥ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
  const waitTime = nextMeasureStart - currentPosition;
  const currentTime = millis() / 1000.0;
  
  avatar.isPending = true;
  avatar.pendingStartTime = currentTime + waitTime;
  avatar.playbackStartPosition = nextMeasureStart;
  
  pendingAvatars.set(avatar.id, { avatar, sound });
  
  console.log(`‚è∞ ${avatar.nickname} ÎèôÍ∏∞Ìôî Ïä§ÏºÄÏ§ÑÎßÅ:`);
  console.log(`   ÌòÑÏû¨ ÏúÑÏπò: ${currentPosition.toFixed(2)}Ï¥à`);
  console.log(`   ÌòÑÏû¨ ÎßàÎîî: ${currentMeasure + 1}ÎßàÎîî`);
  console.log(`   Îã§Ïùå ÎßàÎîî ÏãúÏûë: ${nextMeasureStart.toFixed(2)}Ï¥à`);
  console.log(`   ÎåÄÍ∏∞ ÏãúÍ∞Ñ: ${waitTime.toFixed(2)}Ï¥à`);
  console.log(`   Ïã§Ìñâ ÏòàÏ†ï ÏãúÍ∞Å: ${avatar.pendingStartTime.toFixed(2)}Ï¥à`);
}

// ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ ÏãúÏûë
function startMasterClock() {
  masterClock.isRunning = true;
  masterClock.startTime = millis() / 1000.0; // Ï¥à Îã®ÏúÑÎ°ú Î≥ÄÌôò
  masterClock.currentBeat = 0;
  masterClock.currentMeasure = 0;
  updateNextMeasureStart();
  console.log('üéØ ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ ÏãúÏûë');
}

// ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ Î¶¨ÏÖã (ÌïÑÏöîÏãú ÏÇ¨Ïö©)
function resetMasterClock() {
  console.log('üîÑ ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ Î¶¨ÏÖã');
  
  // Î™®Îì† ÏùåÏïÖ Ï†ïÏßÄ
  playingAvatars.clear();
  pendingAvatars.clear();
  
  // Î™®Îì† Tone.js ÌîåÎ†àÏù¥Ïñ¥ Ï†ïÏßÄ
  Object.values(tonePlayers).forEach(player => {
    if (player && player.state === 'started') {
      player.stop();
    }
  });
  
  // Î™®Îì† p5.sound Ï†ïÏßÄ
  Object.values(musicSamples).forEach(sound => {
    if (sound && sound.isPlaying()) {
      sound.stop();
    }
  });
  
  // ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ Ï†ïÏßÄ
  masterClock.isRunning = false;
  
  console.log('üéØ ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ ÏôÑÏ†Ñ Î¶¨ÏÖã ÏôÑÎ£å');
}

// ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ ÏóÖÎç∞Ïù¥Ìä∏ (Îß§ ÌîÑÎ†àÏûÑ Ìò∏Ï∂ú)
function updateMasterClock() {
  if (!masterClock.isRunning) return;
  
  const currentTime = millis() / 1000.0;
  const elapsedTime = currentTime - masterClock.startTime;
  
  // BPMÏùÑ Ï¥àÎãπ Î∞ïÏûêÎ°ú Î≥ÄÌôò (120 BPM = 2 beats per second)
  const beatsPerSecond = masterClock.bpm / 60.0;
  const totalBeats = elapsedTime * beatsPerSecond;
  
  masterClock.currentBeat = totalBeats % masterClock.beatsPerMeasure;
  masterClock.currentMeasure = Math.floor(totalBeats / masterClock.beatsPerMeasure);
  
  // Îã§Ïùå ÎßàÎîî ÏãúÏûë ÏãúÍ∞Ñ Í≥ÑÏÇ∞
  updateNextMeasureStart();
  
  // ÎåÄÍ∏∞ Ï§ëÏù∏ ÏïÑÎ∞îÌÉÄÎì§Ïù¥ Ïû¨ÏÉù ÏãúÏûëÌï† ÏãúÍ∞ÑÏù∏ÏßÄ ÌôïÏù∏
  checkPendingAvatars(currentTime);
}

// Îã§Ïùå ÎßàÎîî ÏãúÏûë ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
function updateNextMeasureStart() {
  const beatsPerSecond = masterClock.bpm / 60.0;
  const nextMeasureBeats = (masterClock.currentMeasure + 1) * masterClock.beatsPerMeasure;
  masterClock.nextMeasureStart = masterClock.startTime + (nextMeasureBeats / beatsPerSecond);
}

// Îã§Ïùå ÎßàÎîîÏóê ÏïÑÎ∞îÌÉÄ Ïû¨ÏÉù ÏòàÏïΩ
function scheduleAvatarForNextMeasure(avatar, sound) {
  avatar.isPending = true;
  avatar.pendingStartTime = masterClock.nextMeasureStart;
  
  // Ï§ëÏöî: Îã§Ïùå ÎßàÎîî ÏãúÏûëÏ†êÏóêÏÑú ÏùåÏõêÏùò Ïñ¥Îäê ÏßÄÏ†êÎ∂ÄÌÑ∞ Ïû¨ÏÉùÌï†ÏßÄ Í≥ÑÏÇ∞
  const playbackStartPosition = masterClock.nextMeasureStart - masterClock.startTime;
  avatar.playbackStartPosition = playbackStartPosition;
  
  pendingAvatars.set(avatar.id, { avatar, sound });
  
  console.log(`‚è∞ ${avatar.nickname} Îã§Ïùå ÎßàÎîî ÎåÄÍ∏∞ Ï§ë`);
  console.log(`   ÏãúÏûë ÏòàÏ†ï ÏãúÍ∞Ñ: ${avatar.pendingStartTime.toFixed(2)}Ï¥à`);
  console.log(`   Ïû¨ÏÉù ÏãúÏûë ÏúÑÏπò: ${playbackStartPosition.toFixed(2)}Ï¥à ÏßÄÏ†êÎ∂ÄÌÑ∞`);
}

// ÎåÄÍ∏∞ Ï§ëÏù∏ ÏïÑÎ∞îÌÉÄÎì§ ÌôïÏù∏ Î∞è Ïû¨ÏÉù
function checkPendingAvatars(currentTime) {
  for (const [avatarId, { avatar, sound }] of pendingAvatars) {
    if (currentTime >= avatar.pendingStartTime) {
      // ÏãúÍ∞ÑÏù¥ ÎêòÏóàÏúºÎØÄÎ°ú Í≥ÑÏÇ∞Îêú Ïû¨ÏÉù ÏúÑÏπòÏóêÏÑú ÏãúÏûë
      console.log(`‚è∞ ${avatar.nickname} ÎåÄÍ∏∞ ÏôÑÎ£å - ${avatar.playbackStartPosition.toFixed(2)}Ï¥à ÏúÑÏπòÏóêÏÑú Ïû¨ÏÉù ÏãúÏûë`);
      startAvatarMusicFromPosition(avatar, sound, avatar.playbackStartPosition);
      
      // ÎåÄÍ∏∞ Î™©Î°ùÏóêÏÑú Ï†úÍ±∞
      avatar.isPending = false;
      pendingAvatars.delete(avatarId);
    }
  }
}

// Ïã§Ï†ú ÏùåÏïÖ Ïû¨ÏÉù ÏãúÏûë (Ï≤´ Î≤àÏß∏ ÏïÑÎ∞îÌÉÄÏö© - ÌòÑÏû¨ ÏúÑÏπòÏóêÏÑú)
function startAvatarMusic(avatar, sound) {
  const currentPosition = getCurrentPlaybackPosition();
  startAvatarMusicFromPosition(avatar, sound, currentPosition);
}

// ÏßÄÏ†ïÎêú ÏúÑÏπòÏóêÏÑú ÏùåÏïÖ Ïû¨ÏÉù ÏãúÏûë
async function startAvatarMusicFromPosition(avatar, sound, startPosition) {
  try {
    // Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏Í∞Ä Ï§ëÎã®Îêú Í≤ΩÏö∞ Ïû¨ÏãúÏûë
    if (getAudioContext().state === 'suspended') {
      await getAudioContext().resume();
    }
    
    await playFromPosition(avatar, sound, startPosition);
  } catch (error) {
    console.error('‚ùå ÏùåÏïÖ Ïû¨ÏÉù Ïò§Î•ò:', error);
  }
}

// ÌäπÏ†ï ÏúÑÏπòÏóêÏÑú Ïû¨ÏÉùÌïòÎäî Ïã§Ï†ú Ìï®Ïàò
async function playFromPosition(avatar, sound, startPosition) {
  if (!sound.isPlaying()) {
    // Tone.js ÌîåÎ†àÏù¥Ïñ¥Í∞Ä ÏûàÏúºÎ©¥ Ïö∞ÏÑ† ÏÇ¨Ïö©
    const tonePlayer = tonePlayers[avatar.musicType];
    
    if (tonePlayer && tonePlayer.loaded) {
      try {
        // Tone.js Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏ ÏãúÏûë
        if (Tone.context.state !== 'running') {
          await Tone.start();
          console.log('üéØ Tone.js Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏ ÏãúÏûë');
        }
        
        // Ìï≠ÏÉÅ ÌäπÏ†ï ÏúÑÏπòÏóêÏÑú Ïû¨ÏÉù (0Ï¥àÎì† ÏïÑÎãàÎì†)
        // ÏùåÏõêÏùò Í∏∏Ïù¥Î•º Í≥†Î†§ÌïòÏó¨ Î£®ÌîÑ ÎÇ¥ÏóêÏÑúÏùò ÏúÑÏπò Í≥ÑÏÇ∞
        const loopPosition = tonePlayer.buffer ? startPosition % tonePlayer.buffer.duration : startPosition;
        
        tonePlayer.start(0, loopPosition);
        console.log(`üéµ ${avatar.nickname} Tone.js Ïû¨ÏÉù ÏãúÏûë (${loopPosition.toFixed(2)}Ï¥à ÏßÄÏ†êÎ∂ÄÌÑ∞)`);
        
        playingAvatars.add(avatar.id);
        return; // Tone.jsÎ°ú ÏÑ±Í≥µÌñàÏúºÎ©¥ Î¶¨ÌÑ¥
      } catch (error) {
        console.error('‚ùå Tone.js Ïû¨ÏÉù Ïò§Î•ò:', error, '- p5.soundÎ°ú Ìè¥Î∞±');
      }
    }
    
    // Tone.jsÍ∞Ä Ïã§Ìå®ÌïòÍ±∞ÎÇò ÏóÜÏúºÎ©¥ p5.sound ÏÇ¨Ïö© (Ìè¥Î∞±)
    try {
      if (startPosition === 0) {
        sound.loop();
        console.log(`üéµ ${avatar.nickname} p5.sound Ïû¨ÏÉù ÏãúÏûë (Ï≤òÏùåÎ∂ÄÌÑ∞)`);
      } else {
        // p5.soundÏùò play() Ìï®Ïàò ÏÇ¨Ïö©: play(delay, rate, amp, cueStart)
        sound.play(0, 1, 1, startPosition);
        sound.setLoop(true);
        console.log(`üéµ ${avatar.nickname} p5.sound Ïû¨ÏÉù ÏãúÏûë (${startPosition.toFixed(2)}Ï¥à ÏßÄÏ†êÎ∂ÄÌÑ∞)`);
      }
       addSongShapes(avatar); 
    } catch (error) {
      console.warn('‚ö†Ô∏è p5.sound ÏúÑÏπò Ïû¨ÏÉù Ïã§Ìå®, Ï≤òÏùåÎ∂ÄÌÑ∞ Ïû¨ÏÉù:', error);
      sound.loop();
      console.log(`üéµ ${avatar.nickname} p5.sound Ïû¨ÏÉù ÏãúÏûë (Ï≤òÏùåÎ∂ÄÌÑ∞ - Ìè¥Î∞±)`);
      addSongShapes(avatar); //
    }
    
    playingAvatars.add(avatar.id);
  }
}

// ÏùåÏïÖ ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ ÌëúÏãú
function drawMusicDebugInfo() {
  push();
  fill(255, 255, 255, 200);
  textAlign(LEFT);
  textSize(16);
  
  const currentTime = millis() / 1000.0;
  const elapsedTime = masterClock.isRunning ? currentTime - masterClock.startTime : 0;
  const actualPosition = getCurrentPlaybackPosition();
  
  let debugText = [
    `üéØ ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ ${masterClock.isRunning ? 'Ïã§Ìñâ Ï§ë' : 'Ï†ïÏßÄ'}`,
    `‚è±Ô∏è ÎßàÏä§ÌÑ∞ ÏãúÍ∞Ñ: ${elapsedTime.toFixed(1)}Ï¥à`,
    `üéµ Ïã§Ï†ú Ïû¨ÏÉù ÏúÑÏπò: ${actualPosition.toFixed(1)}Ï¥à`,
    `üìä ÌòÑÏû¨ ÎßàÎîî: ${Math.floor(actualPosition / 2) + 1}ÎßàÎîî`, // 2Ï¥à = 1ÎßàÎîî (120BPM, 4/4Î∞ïÏûê)
    `üéº Ïû¨ÏÉù Ï§ë: ${playingAvatars.size}Í∞ú`,
    `‚è∞ ÎåÄÍ∏∞ Ï§ë: ${pendingAvatars.size}Í∞ú`,
    `‚å®Ô∏è 'R' ÌÇ§: ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ Î¶¨ÏÖã`
  ];
  
  if (pendingAvatars.size > 0) {
    // ÎåÄÍ∏∞ Ï§ëÏù∏ ÏïÑÎ∞îÌÉÄÏùò Ï†ïÎ≥¥ ÌëúÏãú
    for (const [avatarId, { avatar }] of pendingAvatars) {
      const waitTime = Math.max(0, avatar.pendingStartTime - currentTime);
      debugText.push(`‚è∞ ${avatar.nickname}: ${waitTime.toFixed(1)}Ï¥à ÌõÑ Ïû¨ÏÉù`);
      break; // Ï≤´ Î≤àÏß∏Îßå ÌëúÏãú
    }
  }
  
  for (let i = 0; i < debugText.length; i++) {
    text(debugText[i], 20, 30 + i * 25);
  }
  
  pop();
}

// ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
function keyPressed() {
  if (key === 'r' || key === 'R') {
    resetMasterClock();
    return false; // Í∏∞Î≥∏ ÎèôÏûë Î∞©ÏßÄ
  }
  
  if (key === ' ') { // spacebar ÏûÖÎ†•
    console.log('üéµ Ïä§ÌéòÏù¥Ïä§Î∞î ÏûÖÎ†• - ÏùåÏïÖ Ïû¨ÏÉù ÏãúÏûë');
    
    // Î¨¥ÎåÄÏóê ÏûàÎäî Î™®Îì† ÏïÑÎ∞îÌÉÄÏùò ÏùåÏõêÏùÑ Ïû¨ÏÉù
    const onStageAvatars = stageAvatars.filter(avatar => avatar.isOnStage);
    
    if (onStageAvatars.length === 0) {
      console.log('‚ùå Î¨¥ÎåÄÏóê ÏïÑÎ∞îÌÉÄÍ∞Ä ÏóÜÏäµÎãàÎã§');
      return false;
    }
    
    console.log(`üé≠ Î¨¥ÎåÄ ÏïÑÎ∞îÌÉÄ ${onStageAvatars.length}Í∞ú ÏùåÏõê Ïû¨ÏÉù ÏãúÏûë`);
    
    // Í∞Å ÏïÑÎ∞îÌÉÄÎ≥ÑÎ°ú ÏùåÏõê Ïû¨ÏÉù
    onStageAvatars.forEach(avatar => {
      startMusicForAvatar(avatar);
    });
    
    return false; // Í∏∞Î≥∏ ÎèôÏûë Î∞©ÏßÄ
  }
}

// ÏùåÏïÖ Ï†ïÏßÄ Ìï®Ïàò
function stopAvatarMusic(avatar) {
  if (!avatar.musicType) return;
  
  const sound = musicSamples[avatar.musicType];
  const tonePlayer = tonePlayers[avatar.musicType];
  
  try {
    // Tone.js ÌîåÎ†àÏù¥Ïñ¥ Ï†ïÏßÄ
    if (tonePlayer && tonePlayer.loaded) {
      if (tonePlayer.state === 'started') {
        tonePlayer.stop();
        console.log(`üõë ${avatar.nickname} Tone.js ÏùåÏïÖ Ï†ïÏßÄ`);
      }
    }
    
    // p5.sound ÌîåÎ†àÏù¥Ïñ¥ Ï†ïÏßÄ
    if (sound && sound.isPlaying()) {
      sound.stop();
      console.log(`üõë ${avatar.nickname} p5.sound ÏùåÏïÖ Ï†ïÏßÄ`);
    }
    
    playingAvatars.delete(avatar.id);
    
    // ÎåÄÍ∏∞ Ï§ëÏù¥ÏóàÎã§Î©¥ ÎåÄÍ∏∞ Î™©Î°ùÏóêÏÑúÎèÑ Ï†úÍ±∞
    if (avatar.isPending) {
      avatar.isPending = false;
      pendingAvatars.delete(avatar.id);
      console.log(`‚è∞ ${avatar.nickname} ÎåÄÍ∏∞ Î™©Î°ùÏóêÏÑú Ï†úÍ±∞`);
    }
    
    // ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ÏùÄ Í≥ÑÏÜç Ïú†ÏßÄ (Ï£ºÏÑù Ï≤òÎ¶¨)
    // Ïù¥Î†áÍ≤å ÌïòÎ©¥ ÏïÑÎ∞îÌÉÄÎ•º Îã§Ïãú Ïò¨Î†∏ÏùÑ Îïå Í∏∞Ï°¥ ÌÉÄÏù¥Î∞çÏóê ÎßûÏ∂∞ ÎèôÍ∏∞ÌôîÎê®
    /*
    if (playingAvatars.size === 0 && pendingAvatars.size === 0) {
      masterClock.isRunning = false;
      console.log('üéØ ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ Ï†ïÏßÄ');
    }
    */
    
    console.log(`üéØ ÎßàÏä§ÌÑ∞ ÌÅ¥Îü≠ Ïú†ÏßÄ Ï§ë (Ïû¨ÏÉù: ${playingAvatars.size}Í∞ú, ÎåÄÍ∏∞: ${pendingAvatars.size}Í∞ú)`);
    removeSongShapes(avatar); // ‚úÖ

    
  } catch (error) {
    console.error('‚ùå ÏùåÏïÖ Ï†ïÏßÄ Ïò§Î•ò:', error);
  }
}

// Ìå®Îãù UI ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
function updatePanningUI() {
  const panUI = document.getElementById('panUI');
  const cameraDebug = document.getElementById('cameraDebug');
  const canvas = document.querySelector('canvas');
  
  if (isPanning) {
    panUI.style.display = 'block';
    if (canvas) canvas.style.cursor = 'grabbing';
  } else {
    panUI.style.display = 'none';
    if (canvas) canvas.style.cursor = 'default';
  }
  
  // Ïπ¥Î©îÎùº ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ (Í∞úÎ∞úÏö©)
  if (cameraDebug) {
    const canvasWidth = 2560;
    const canvasHeight = 1760;
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    const maxCameraX = Math.max(0, canvasWidth - viewportWidth);
    const maxCameraY = Math.max(0, canvasHeight - viewportHeight);
    
    cameraDebug.innerHTML = `Ïπ¥Î©îÎùº: (${Math.round(cameraX)}, ${Math.round(cameraY)}) | ÏµúÎåÄ: (${maxCameraX}, ${maxCameraY})<br>Ìå®Îãù: ${isPanning} | Î∑∞Ìè¨Ìä∏: ${viewportWidth}x${viewportHeight}`;
    cameraDebug.style.display = 'block';
    
    // Ïã§ÏãúÍ∞ÑÏúºÎ°ú Ïπ¥Î©îÎùº Í∞íÏù¥ Î∞îÎÄåÎäîÏßÄ ÌôïÏù∏ (ÎÑàÎ¨¥ ÎßéÏùÄ Î°úÍ∑∏ Î∞©ÏßÄ)
    if (isPanning) {
      console.log('üìä Ïã§ÏãúÍ∞Ñ Ïπ¥Î©îÎùº:', cameraX, cameraY, '/', maxCameraX, maxCameraY);
    }
  }
  
  // Î¶¨ÏÖã Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
  updateResetButton();
}

// Î¶¨ÏÖã Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
function updateResetButton() {
  const resetBtn = document.getElementById('resetStageBtn');
  if (!resetBtn) return;
  
  // Î¨¥ÎåÄÏóê ÏïÑÎ∞îÌÉÄÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
  let stageAvatarCount = 0;
  
  // Î¨¥ÎåÄÏïÑÎ∞îÌÉÄ ÌôïÏù∏
  stageAvatars.forEach(avatar => {
    if (avatar.isOnStage) stageAvatarCount++;
  });
  
  // ÏùºÎ∞ò ÏïÑÎ∞îÌÉÄ ÌôïÏù∏
  avatars.forEach(avatar => {
    if (avatar.isOnStage) stageAvatarCount++;
  });
  
  if (stageAvatarCount > 0) {
    resetBtn.disabled = false;
    resetBtn.textContent = `üé≠ Î¨¥ÎåÄ Î¶¨ÏÖã (${stageAvatarCount}Í∞ú)`;
  } else {
    resetBtn.disabled = true;
    resetBtn.textContent = 'üé≠ Î¨¥ÎåÄ Î¶¨ÏÖã';
  }
}

window.preload = preload;
window.setup = setup;
window.draw = draw;
window.mousePressed = mousePressed;
window.mouseDragged = mouseDragged;
window.mouseReleased = mouseReleased;
window.mouseWheel = mouseWheel;
window.keyPressed = keyPressed;
window.closePopup = closePopup;
window.resetStage = resetStage;
window.sortAvatars = sortAvatars;

// ==========================================
// p5.js ÏÇ¨Ïö¥Îìú ÏãúÏä§ÌÖú Ìï®ÏàòÎì§
// ==========================================

// Í∞úÎ≥Ñ ÏïÑÎ∞îÌÉÄ ÏùåÏïÖ Ïû¨ÏÉù Ìï®Ïàò
function startMusicForAvatar(avatar) {
  if (!avatar.musicType) {
    console.warn(`‚ö†Ô∏è ${avatar.nickname}: musicTypeÏù¥ ÏóÜÏäµÎãàÎã§`);
    return;
  }
  
  console.log(`üéµ ${avatar.nickname}Ïùò ÏùåÏõê Ïû¨ÏÉù ÏãúÏûë: ${avatar.musicType}`);
  
  // p5.js ÏÇ¨Ïö¥Îìú ÏãúÏä§ÌÖúÏúºÎ°ú Ïû¨ÏÉù
  if (musicSamples[avatar.musicType]) {
    const sound = musicSamples[avatar.musicType];
    
    // Ïù¥ÎØ∏ Ïû¨ÏÉù Ï§ëÏù¥Î©¥ Ï§ëÏßÄ ÌõÑ Îã§Ïãú ÏãúÏûë
    if (sound.isPlaying()) {
      sound.stop();
    }
    
    // Î≥ºÎ•® ÏÑ§Ï†ï
    sound.setVolume(0.7);
    
    // Î£®ÌîÑ Ïû¨ÏÉù ÏãúÏûë
    sound.loop();
    
    // Ïû¨ÏÉù Ï§ëÏù∏ ÏïÑÎ∞îÌÉÄ Î™©Î°ùÏóê Ï∂îÍ∞Ä
    playingAvatars.add(avatar.id);
    addSongShapes(avatar);
    console.log(`‚úÖ ${avatar.nickname} ÏùåÏõê Ïû¨ÏÉù ÏãúÏûëÎê®`);
  } else {
    console.warn(`‚ö†Ô∏è ${avatar.nickname}Ïùò ÏùåÏõê ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå: ${avatar.musicType}`);
  }
}

// PCÎ£∏ Í≤åÏûÑÏö© ÏùåÏïÖ ÏãúÏä§ÌÖú (p5.js ÏÇ¨Ïö©)
function playPCRoomMusicSystem() {
  console.log('üéµ PCÎ£∏ ÏùåÏïÖ ÏãúÏä§ÌÖú ÏãúÏûë');
  
  // ÌòÑÏû¨ Î¨¥ÎåÄÏóê ÏûàÎäî PCÎ£∏ Í≤åÏûÑÏö© ÏïÑÎ∞îÌÉÄÎì§ Ï∞æÍ∏∞
  const pcRoomAvatars = stageAvatars.filter(avatar => 
    avatar.isOnStage && avatar.musicType && avatar.musicType.includes('_gaming_')
  );
  
  if (pcRoomAvatars.length === 0) {
    console.log('‚ùå PCÎ£∏ Í≤åÏûÑÏö© ÏïÑÎ∞îÌÉÄÍ∞Ä Î¨¥ÎåÄÏóê ÏóÜÏäµÎãàÎã§');
    return;
  }
  
  console.log(`üéÆ PCÎ£∏ Í≤åÏûÑÏö© ÏïÑÎ∞îÌÉÄ ${pcRoomAvatars.length}Í∞ú Î∞úÍ≤¨`);
  
  // Í∞Å ÏïÑÎ∞îÌÉÄÏùò ÏùåÏõêÏùÑ ÎèôÏãúÏóê Ïû¨ÏÉù
  pcRoomAvatars.forEach(avatar => {
    startPCRoomMusic(avatar);
  });
}

function startPCRoomMusic(avatar) {
  if (!avatar.musicType) return;
  
  console.log(`üéµ ${avatar.nickname}Ïùò PCÎ£∏ ÏùåÏõê Ïû¨ÏÉù ÏãúÏûë: ${avatar.musicType}`);
  
  // p5.js ÏÇ¨Ïö¥Îìú ÏãúÏä§ÌÖúÏúºÎ°ú Ïû¨ÏÉù
  if (musicSamples[avatar.musicType]) {
    const sound = musicSamples[avatar.musicType];
    
    // Ïù¥ÎØ∏ Ïû¨ÏÉù Ï§ëÏù¥Î©¥ Ï§ëÏßÄ ÌõÑ Îã§Ïãú ÏãúÏûë
    if (sound.isPlaying()) {
      sound.stop();
    }
    
    // Î≥ºÎ•® ÏÑ§Ï†ï
    sound.setVolume(0.7);
    
    // Î£®ÌîÑ Ïû¨ÏÉù ÏãúÏûë
    sound.loop();
    
    // Ïû¨ÏÉù Ï§ëÏù∏ ÏïÑÎ∞îÌÉÄ Î™©Î°ùÏóê Ï∂îÍ∞Ä
    playingAvatars.add(avatar.id);
    addSongShapes(avatar);
    console.log(`‚úÖ ${avatar.nickname} PCÎ£∏ ÏùåÏõê Ïû¨ÏÉù ÏãúÏûëÎê®`);
  } else {
    console.warn(`‚ö†Ô∏è ${avatar.nickname}Ïùò ÏùåÏõê ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå: ${avatar.musicType}`);
  }
}

// Ï†ÑÏó≠ Ìï®ÏàòÎ°ú ÎÖ∏Ï∂ú
window.playPCRoomMusicSystem = playPCRoomMusicSystem;
window.startPCRoomMusic = startPCRoomMusic;
window.startMusicForAvatar = startMusicForAvatar;

// ==========================================
// ÏùåÏïÖ ÏÑ∏Ìä∏ Ìò∏ÌôòÏÑ± Í≤ÄÏÇ¨ ÏãúÏä§ÌÖú
// ==========================================

